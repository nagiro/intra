<?php

require 'lib/model/om/BaseUsuarisSitesPeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'usuaris_sites' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 10/13/10 11:47:07
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class UsuarisSitesPeer extends BaseUsuarisSitesPeer {
    
    /**
     * Cerca el primer Site d'un usuari. 
     * @param $U Usuari ID     
     * @return Int Site ID
     * */                    
    static public function getFirstSite($U)
    {
        $C = new Criteria();
        $C->add(self::USUARI_ID, $U->getusuariid());
        $C->add(self::ACTIU , 1);        
        $OS = self::doSelectOne($C);        
        
        if($OS instanceof UsuarisSites):
            return $OS->getSiteId();
        else:
            return null;
        endif;
                
    }

    /**
     * Retorna la Select dels sites d'un usuari. 
     * @param $idU Usuari ID     
     * @return Select 
     * */                    
    static public function getUserSites($idU)
    {
        $C = new Criteria();
        $C->add(self::USUARI_ID, $idU);
        $C->add(self::ACTIU , 1);
        return self::doSelect($C);             
    }

    /**
     * Retorna els sites que hi ha segons un usuari.      
     * @param $idU Usuari ID
     * @return Array('Site ID'=>'Site Name')
     * */                    
    static public function getSitesArray($idU)
    {        
        $C = new Criteria();
        $C->add(self::USUARI_ID, $idU);
        $C->add(self::ACTIU , 1);
        $OS = self::doSelect($C);
        $RET = array();
        
        foreach($OS as $O):
            $RET[$O->getSiteId()] = $O->getSites()->getNom();
        endforeach;        
        
        return $RET;        
    }

    /**
     * Criteria que marca només els actius.      
     * @param $C Criteria()
     * @return Criteria()
     * */                    
    static public function getCriteriaActiu( $C )
    {
      $C->add(self::ACTIU,true);      
      return $C;
    }    

    /**
     * Inicialitzem un formulari de UsuariSite      
     * @param $idU Usuari ID
     * @param $idS Site ID
     * @param $new Es mostra "Mostra l'opció NEW SITE al formulari"
     * @return UsuarisSitesForm()
     * */                    
  	static public function initialize( $idU , $idS , $new = false )
	{	   
	   
		$OO = UsuarisSitesPeer::retrieveByPK($idU,$idS);            
		if(!($OO instanceof UsuarisSites)):            			
			$OO = new UsuarisSites();
            $OO->setUsuariId($idU);
            $OO->setSiteId($idS);
            $OO->setNivellId(NivellsPeer::REGISTRAT);
            $OO->setActiu(true);
            $OO->setNivellId(NivellsPeer::CAP);			     						
		endif; 
        
        return new UsuarisSitesForm($OO,array('IDS'=>$idS,'NEW'=>$new));
                
	}        

    /**
     * A partir d'un usuari trobem els sites als que està relacionat.      
     * @param $idU Usuari ID     
     * @param $all Mostra tots els Sites, també els que no setan relacionats.
     * @return UsuarisSitesForm()
     * */                    
    static public function getSites($idU , $all = false)
    {
        $RET = array();
        $C = new Criteria();                
        $C = self::getCriteriaActiu($C);

        if(!$all):        
            $C->addJoin(SitesPeer::SITE_ID, self::SITE_ID);
            $C = SitesPeer::getCriteriaActiu($C);            
        endif;
        
        foreach(SitesPeer::doSelect($C) as $OS):
            $RET[$OS->getSiteId()] = $OS->getNom();
        endforeach;
        
        return $RET;        
    }


    /**
     * A partir d'un DNI retorna els sites i els nivells.      
     * @param $DNI Usuari DNI          
     * @return Array('Site ID'=>'Nivell ID')
     * */                    
    static public function searchDNI($DNI)
    {
        $RET = array();
        $OU = UsuarisPeer::cercaDNI($DNI);
        if($OU instanceof Usuaris):
            $C = new Criteria();
            $C = self::getCriteriaActiu($C);
            $C->add(self::USUARI_ID , $OU->getUsuariid());
            foreach(self::doSelect($C) as $OUS):                                
                $RET[$OUS->getSiteId()] = $OUS->getNivellId();                
            endforeach;                        
            return $RET;
        endif; 
        return array();        
    }

    /**
     * A partir d'un SITE retorna els usuaris vinculats.       
     * @param $idS Site ID          
     * @param $nivell Segons el nivell, mostrarà els usuaris
     * @return Array('Usuari ID'=>'Usuri Nom')
     * */                    
    static public function getSitesUsersSelect($idS, $nivell)
    {
        $RET = array();
        $LOUS = self::getSitesUsers($idS,$nivell);
        foreach($LOUS as $OUS):
            $RET[$OUS->getUsuariId()] = UsuarisPeer::getNomComplet($OUS->getUsuariId());
        endforeach;
        
        return $RET;
    }


    /**
     * Retorna el Select amb els usuaris d'un Site       
     * @param $idS Site ID          
     * @param $nivell Segons el nivell, mostrarà els usuaris
     * @return Select
     * */                    
    static public function getSitesUsers($idS,$nivell = NivellsPeer::ADMIN)
    {
        $C = new Criteria();
        $C = self::getCriteriaActiu($C);
        $C = UsuarisPeer::getCriteriaActiu($C,$idS);
        $C->addJoin(self::USUARI_ID, UsuarisPeer::USUARIID);
        $C->add(UsuarisSitesPeer::NIVELL_ID, $nivell);
        $C->add(self::SITE_ID, $idS);        
        return self::doSelect($C);
    }

    /**
     * A partir d'un Site retorna el primer usuari. (DEPRECATED)       
     * @param $idS Site ID               
     * @return Select
     * */                    
    static public function getFirsSiteUser($idS)
    {
        $C = new Criteria();
        $C = self::getCriteriaActiu($C);
        $C->add(self::SITE_ID,$idS);
        return self::doSelectOne();
    }

} // UsuarisSitesPeer