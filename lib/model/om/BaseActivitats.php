<?php

/**
 * Base class that represents a row from the 'activitats' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 09/05/11 11:02:56
 *
 * @package    lib.model.om
 */
abstract class BaseActivitats extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ActivitatsPeer
	 */
	protected static $peer;

	/**
	 * The value for the activitatid field.
	 * @var        int
	 */
	protected $activitatid;

	/**
	 * The value for the cicles_cicleid field.
	 * @var        int
	 */
	protected $cicles_cicleid;

	/**
	 * The value for the tipusactivitat_idtipusactivitat field.
	 * @var        int
	 */
	protected $tipusactivitat_idtipusactivitat;

	/**
	 * The value for the nom field.
	 * @var        string
	 */
	protected $nom;

	/**
	 * The value for the preu field.
	 * @var        double
	 */
	protected $preu;

	/**
	 * The value for the preureduit field.
	 * @var        double
	 */
	protected $preureduit;

	/**
	 * The value for the publicable field.
	 * @var        int
	 */
	protected $publicable;

	/**
	 * The value for the estat field.
	 * @var        string
	 */
	protected $estat;

	/**
	 * The value for the descripcio field.
	 * @var        string
	 */
	protected $descripcio;

	/**
	 * The value for the imatge field.
	 * @var        string
	 */
	protected $imatge;

	/**
	 * The value for the pdf field.
	 * @var        string
	 */
	protected $pdf;

	/**
	 * The value for the publicaweb field.
	 * @var        int
	 */
	protected $publicaweb;

	/**
	 * The value for the tcurt field.
	 * @var        string
	 */
	protected $tcurt;

	/**
	 * The value for the dcurt field.
	 * @var        string
	 */
	protected $dcurt;

	/**
	 * The value for the tmig field.
	 * @var        string
	 */
	protected $tmig;

	/**
	 * The value for the dmig field.
	 * @var        string
	 */
	protected $dmig;

	/**
	 * The value for the tcomplet field.
	 * @var        string
	 */
	protected $tcomplet;

	/**
	 * The value for the dcomplet field.
	 * @var        string
	 */
	protected $dcomplet;

	/**
	 * The value for the tipusenviament field.
	 * @var        int
	 */
	protected $tipusenviament;

	/**
	 * The value for the organitzador field.
	 * @var        string
	 */
	protected $organitzador;

	/**
	 * The value for the categories field.
	 * @var        string
	 */
	protected $categories;

	/**
	 * The value for the responsable field.
	 * @var        string
	 */
	protected $responsable;

	/**
	 * The value for the infopractica field.
	 * @var        string
	 */
	protected $infopractica;

	/**
	 * The value for the site_id field.
	 * @var        int
	 */
	protected $site_id;

	/**
	 * The value for the actiu field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $actiu;

	/**
	 * The value for the isentrada field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $isentrada;

	/**
	 * The value for the places field.
	 * @var        int
	 */
	protected $places;

	/**
	 * @var        Cicles
	 */
	protected $aCicles;

	/**
	 * @var        Tipusactivitat
	 */
	protected $aTipusactivitat;

	/**
	 * @var        array Horaris[] Collection to store aggregation of Horaris objects.
	 */
	protected $collHorariss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collHorariss.
	 */
	private $lastHorarisCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ActivitatsPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->actiu = 1;
		$this->isentrada = 0;
	}

	/**
	 * Initializes internal state of BaseActivitats object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [activitatid] column value.
	 * 
	 * @return     int
	 */
	public function getActivitatid()
	{
		return $this->activitatid;
	}

	/**
	 * Get the [cicles_cicleid] column value.
	 * 
	 * @return     int
	 */
	public function getCiclesCicleid()
	{
		return $this->cicles_cicleid;
	}

	/**
	 * Get the [tipusactivitat_idtipusactivitat] column value.
	 * 
	 * @return     int
	 */
	public function getTipusactivitatIdtipusactivitat()
	{
		return $this->tipusactivitat_idtipusactivitat;
	}

	/**
	 * Get the [nom] column value.
	 * 
	 * @return     string
	 */
	public function getNom()
	{
		return $this->nom;
	}

	/**
	 * Get the [preu] column value.
	 * 
	 * @return     double
	 */
	public function getPreu()
	{
		return $this->preu;
	}

	/**
	 * Get the [preureduit] column value.
	 * 
	 * @return     double
	 */
	public function getPreureduit()
	{
		return $this->preureduit;
	}

	/**
	 * Get the [publicable] column value.
	 * 
	 * @return     int
	 */
	public function getPublicable()
	{
		return $this->publicable;
	}

	/**
	 * Get the [estat] column value.
	 * 
	 * @return     string
	 */
	public function getEstat()
	{
		return $this->estat;
	}

	/**
	 * Get the [descripcio] column value.
	 * 
	 * @return     string
	 */
	public function getDescripcio()
	{
		return $this->descripcio;
	}

	/**
	 * Get the [imatge] column value.
	 * 
	 * @return     string
	 */
	public function getImatge()
	{
		return $this->imatge;
	}

	/**
	 * Get the [pdf] column value.
	 * 
	 * @return     string
	 */
	public function getPdf()
	{
		return $this->pdf;
	}

	/**
	 * Get the [publicaweb] column value.
	 * 
	 * @return     int
	 */
	public function getPublicaweb()
	{
		return $this->publicaweb;
	}

	/**
	 * Get the [tcurt] column value.
	 * 
	 * @return     string
	 */
	public function getTcurt()
	{
		return $this->tcurt;
	}

	/**
	 * Get the [dcurt] column value.
	 * 
	 * @return     string
	 */
	public function getDcurt()
	{
		return $this->dcurt;
	}

	/**
	 * Get the [tmig] column value.
	 * 
	 * @return     string
	 */
	public function getTmig()
	{
		return $this->tmig;
	}

	/**
	 * Get the [dmig] column value.
	 * 
	 * @return     string
	 */
	public function getDmig()
	{
		return $this->dmig;
	}

	/**
	 * Get the [tcomplet] column value.
	 * 
	 * @return     string
	 */
	public function getTcomplet()
	{
		return $this->tcomplet;
	}

	/**
	 * Get the [dcomplet] column value.
	 * 
	 * @return     string
	 */
	public function getDcomplet()
	{
		return $this->dcomplet;
	}

	/**
	 * Get the [tipusenviament] column value.
	 * 
	 * @return     int
	 */
	public function getTipusenviament()
	{
		return $this->tipusenviament;
	}

	/**
	 * Get the [organitzador] column value.
	 * 
	 * @return     string
	 */
	public function getOrganitzador()
	{
		return $this->organitzador;
	}

	/**
	 * Get the [categories] column value.
	 * 
	 * @return     string
	 */
	public function getCategories()
	{
		return $this->categories;
	}

	/**
	 * Get the [responsable] column value.
	 * 
	 * @return     string
	 */
	public function getResponsable()
	{
		return $this->responsable;
	}

	/**
	 * Get the [infopractica] column value.
	 * 
	 * @return     string
	 */
	public function getInfopractica()
	{
		return $this->infopractica;
	}

	/**
	 * Get the [site_id] column value.
	 * 
	 * @return     int
	 */
	public function getSiteId()
	{
		return $this->site_id;
	}

	/**
	 * Get the [actiu] column value.
	 * 
	 * @return     int
	 */
	public function getActiu()
	{
		return $this->actiu;
	}

	/**
	 * Get the [isentrada] column value.
	 * 
	 * @return     int
	 */
	public function getIsentrada()
	{
		return $this->isentrada;
	}

	/**
	 * Get the [places] column value.
	 * 
	 * @return     int
	 */
	public function getPlaces()
	{
		return $this->places;
	}

	/**
	 * Set the value of [activitatid] column.
	 * 
	 * @param      int $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setActivitatid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->activitatid !== $v) {
			$this->activitatid = $v;
			$this->modifiedColumns[] = ActivitatsPeer::ACTIVITATID;
		}

		return $this;
	} // setActivitatid()

	/**
	 * Set the value of [cicles_cicleid] column.
	 * 
	 * @param      int $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setCiclesCicleid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cicles_cicleid !== $v) {
			$this->cicles_cicleid = $v;
			$this->modifiedColumns[] = ActivitatsPeer::CICLES_CICLEID;
		}

		if ($this->aCicles !== null && $this->aCicles->getCicleid() !== $v) {
			$this->aCicles = null;
		}

		return $this;
	} // setCiclesCicleid()

	/**
	 * Set the value of [tipusactivitat_idtipusactivitat] column.
	 * 
	 * @param      int $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setTipusactivitatIdtipusactivitat($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tipusactivitat_idtipusactivitat !== $v) {
			$this->tipusactivitat_idtipusactivitat = $v;
			$this->modifiedColumns[] = ActivitatsPeer::TIPUSACTIVITAT_IDTIPUSACTIVITAT;
		}

		if ($this->aTipusactivitat !== null && $this->aTipusactivitat->getIdtipusactivitat() !== $v) {
			$this->aTipusactivitat = null;
		}

		return $this;
	} // setTipusactivitatIdtipusactivitat()

	/**
	 * Set the value of [nom] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setNom($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nom !== $v) {
			$this->nom = $v;
			$this->modifiedColumns[] = ActivitatsPeer::NOM;
		}

		return $this;
	} // setNom()

	/**
	 * Set the value of [preu] column.
	 * 
	 * @param      double $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setPreu($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->preu !== $v) {
			$this->preu = $v;
			$this->modifiedColumns[] = ActivitatsPeer::PREU;
		}

		return $this;
	} // setPreu()

	/**
	 * Set the value of [preureduit] column.
	 * 
	 * @param      double $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setPreureduit($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->preureduit !== $v) {
			$this->preureduit = $v;
			$this->modifiedColumns[] = ActivitatsPeer::PREUREDUIT;
		}

		return $this;
	} // setPreureduit()

	/**
	 * Set the value of [publicable] column.
	 * 
	 * @param      int $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setPublicable($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->publicable !== $v) {
			$this->publicable = $v;
			$this->modifiedColumns[] = ActivitatsPeer::PUBLICABLE;
		}

		return $this;
	} // setPublicable()

	/**
	 * Set the value of [estat] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setEstat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->estat !== $v) {
			$this->estat = $v;
			$this->modifiedColumns[] = ActivitatsPeer::ESTAT;
		}

		return $this;
	} // setEstat()

	/**
	 * Set the value of [descripcio] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setDescripcio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descripcio !== $v) {
			$this->descripcio = $v;
			$this->modifiedColumns[] = ActivitatsPeer::DESCRIPCIO;
		}

		return $this;
	} // setDescripcio()

	/**
	 * Set the value of [imatge] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setImatge($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->imatge !== $v) {
			$this->imatge = $v;
			$this->modifiedColumns[] = ActivitatsPeer::IMATGE;
		}

		return $this;
	} // setImatge()

	/**
	 * Set the value of [pdf] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setPdf($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pdf !== $v) {
			$this->pdf = $v;
			$this->modifiedColumns[] = ActivitatsPeer::PDF;
		}

		return $this;
	} // setPdf()

	/**
	 * Set the value of [publicaweb] column.
	 * 
	 * @param      int $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setPublicaweb($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->publicaweb !== $v) {
			$this->publicaweb = $v;
			$this->modifiedColumns[] = ActivitatsPeer::PUBLICAWEB;
		}

		return $this;
	} // setPublicaweb()

	/**
	 * Set the value of [tcurt] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setTcurt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tcurt !== $v) {
			$this->tcurt = $v;
			$this->modifiedColumns[] = ActivitatsPeer::TCURT;
		}

		return $this;
	} // setTcurt()

	/**
	 * Set the value of [dcurt] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setDcurt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dcurt !== $v) {
			$this->dcurt = $v;
			$this->modifiedColumns[] = ActivitatsPeer::DCURT;
		}

		return $this;
	} // setDcurt()

	/**
	 * Set the value of [tmig] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setTmig($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tmig !== $v) {
			$this->tmig = $v;
			$this->modifiedColumns[] = ActivitatsPeer::TMIG;
		}

		return $this;
	} // setTmig()

	/**
	 * Set the value of [dmig] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setDmig($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dmig !== $v) {
			$this->dmig = $v;
			$this->modifiedColumns[] = ActivitatsPeer::DMIG;
		}

		return $this;
	} // setDmig()

	/**
	 * Set the value of [tcomplet] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setTcomplet($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tcomplet !== $v) {
			$this->tcomplet = $v;
			$this->modifiedColumns[] = ActivitatsPeer::TCOMPLET;
		}

		return $this;
	} // setTcomplet()

	/**
	 * Set the value of [dcomplet] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setDcomplet($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dcomplet !== $v) {
			$this->dcomplet = $v;
			$this->modifiedColumns[] = ActivitatsPeer::DCOMPLET;
		}

		return $this;
	} // setDcomplet()

	/**
	 * Set the value of [tipusenviament] column.
	 * 
	 * @param      int $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setTipusenviament($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tipusenviament !== $v) {
			$this->tipusenviament = $v;
			$this->modifiedColumns[] = ActivitatsPeer::TIPUSENVIAMENT;
		}

		return $this;
	} // setTipusenviament()

	/**
	 * Set the value of [organitzador] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setOrganitzador($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->organitzador !== $v) {
			$this->organitzador = $v;
			$this->modifiedColumns[] = ActivitatsPeer::ORGANITZADOR;
		}

		return $this;
	} // setOrganitzador()

	/**
	 * Set the value of [categories] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setCategories($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->categories !== $v) {
			$this->categories = $v;
			$this->modifiedColumns[] = ActivitatsPeer::CATEGORIES;
		}

		return $this;
	} // setCategories()

	/**
	 * Set the value of [responsable] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setResponsable($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->responsable !== $v) {
			$this->responsable = $v;
			$this->modifiedColumns[] = ActivitatsPeer::RESPONSABLE;
		}

		return $this;
	} // setResponsable()

	/**
	 * Set the value of [infopractica] column.
	 * 
	 * @param      string $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setInfopractica($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->infopractica !== $v) {
			$this->infopractica = $v;
			$this->modifiedColumns[] = ActivitatsPeer::INFOPRACTICA;
		}

		return $this;
	} // setInfopractica()

	/**
	 * Set the value of [site_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setSiteId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->site_id !== $v) {
			$this->site_id = $v;
			$this->modifiedColumns[] = ActivitatsPeer::SITE_ID;
		}

		return $this;
	} // setSiteId()

	/**
	 * Set the value of [actiu] column.
	 * 
	 * @param      int $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setActiu($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->actiu !== $v || $this->isNew()) {
			$this->actiu = $v;
			$this->modifiedColumns[] = ActivitatsPeer::ACTIU;
		}

		return $this;
	} // setActiu()

	/**
	 * Set the value of [isentrada] column.
	 * 
	 * @param      int $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setIsentrada($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->isentrada !== $v || $this->isNew()) {
			$this->isentrada = $v;
			$this->modifiedColumns[] = ActivitatsPeer::ISENTRADA;
		}

		return $this;
	} // setIsentrada()

	/**
	 * Set the value of [places] column.
	 * 
	 * @param      int $v new value
	 * @return     Activitats The current object (for fluent API support)
	 */
	public function setPlaces($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->places !== $v) {
			$this->places = $v;
			$this->modifiedColumns[] = ActivitatsPeer::PLACES;
		}

		return $this;
	} // setPlaces()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->actiu !== 1) {
				return false;
			}

			if ($this->isentrada !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->activitatid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->cicles_cicleid = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->tipusactivitat_idtipusactivitat = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->nom = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->preu = ($row[$startcol + 4] !== null) ? (double) $row[$startcol + 4] : null;
			$this->preureduit = ($row[$startcol + 5] !== null) ? (double) $row[$startcol + 5] : null;
			$this->publicable = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->estat = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->descripcio = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->imatge = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->pdf = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->publicaweb = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->tcurt = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->dcurt = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->tmig = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->dmig = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->tcomplet = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->dcomplet = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->tipusenviament = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->organitzador = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->categories = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->responsable = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->infopractica = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->site_id = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->actiu = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->isentrada = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->places = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 27; // 27 = ActivitatsPeer::NUM_COLUMNS - ActivitatsPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Activitats object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aCicles !== null && $this->cicles_cicleid !== $this->aCicles->getCicleid()) {
			$this->aCicles = null;
		}
		if ($this->aTipusactivitat !== null && $this->tipusactivitat_idtipusactivitat !== $this->aTipusactivitat->getIdtipusactivitat()) {
			$this->aTipusactivitat = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ActivitatsPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ActivitatsPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aCicles = null;
			$this->aTipusactivitat = null;
			$this->collHorariss = null;
			$this->lastHorarisCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ActivitatsPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseActivitats:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				ActivitatsPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseActivitats:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ActivitatsPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseActivitats:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseActivitats:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ActivitatsPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCicles !== null) {
				if ($this->aCicles->isModified() || $this->aCicles->isNew()) {
					$affectedRows += $this->aCicles->save($con);
				}
				$this->setCicles($this->aCicles);
			}

			if ($this->aTipusactivitat !== null) {
				if ($this->aTipusactivitat->isModified() || $this->aTipusactivitat->isNew()) {
					$affectedRows += $this->aTipusactivitat->save($con);
				}
				$this->setTipusactivitat($this->aTipusactivitat);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ActivitatsPeer::ACTIVITATID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ActivitatsPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setActivitatid($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ActivitatsPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collHorariss !== null) {
				foreach ($this->collHorariss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCicles !== null) {
				if (!$this->aCicles->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCicles->getValidationFailures());
				}
			}

			if ($this->aTipusactivitat !== null) {
				if (!$this->aTipusactivitat->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTipusactivitat->getValidationFailures());
				}
			}


			if (($retval = ActivitatsPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collHorariss !== null) {
					foreach ($this->collHorariss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ActivitatsPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getActivitatid();
				break;
			case 1:
				return $this->getCiclesCicleid();
				break;
			case 2:
				return $this->getTipusactivitatIdtipusactivitat();
				break;
			case 3:
				return $this->getNom();
				break;
			case 4:
				return $this->getPreu();
				break;
			case 5:
				return $this->getPreureduit();
				break;
			case 6:
				return $this->getPublicable();
				break;
			case 7:
				return $this->getEstat();
				break;
			case 8:
				return $this->getDescripcio();
				break;
			case 9:
				return $this->getImatge();
				break;
			case 10:
				return $this->getPdf();
				break;
			case 11:
				return $this->getPublicaweb();
				break;
			case 12:
				return $this->getTcurt();
				break;
			case 13:
				return $this->getDcurt();
				break;
			case 14:
				return $this->getTmig();
				break;
			case 15:
				return $this->getDmig();
				break;
			case 16:
				return $this->getTcomplet();
				break;
			case 17:
				return $this->getDcomplet();
				break;
			case 18:
				return $this->getTipusenviament();
				break;
			case 19:
				return $this->getOrganitzador();
				break;
			case 20:
				return $this->getCategories();
				break;
			case 21:
				return $this->getResponsable();
				break;
			case 22:
				return $this->getInfopractica();
				break;
			case 23:
				return $this->getSiteId();
				break;
			case 24:
				return $this->getActiu();
				break;
			case 25:
				return $this->getIsentrada();
				break;
			case 26:
				return $this->getPlaces();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ActivitatsPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getActivitatid(),
			$keys[1] => $this->getCiclesCicleid(),
			$keys[2] => $this->getTipusactivitatIdtipusactivitat(),
			$keys[3] => $this->getNom(),
			$keys[4] => $this->getPreu(),
			$keys[5] => $this->getPreureduit(),
			$keys[6] => $this->getPublicable(),
			$keys[7] => $this->getEstat(),
			$keys[8] => $this->getDescripcio(),
			$keys[9] => $this->getImatge(),
			$keys[10] => $this->getPdf(),
			$keys[11] => $this->getPublicaweb(),
			$keys[12] => $this->getTcurt(),
			$keys[13] => $this->getDcurt(),
			$keys[14] => $this->getTmig(),
			$keys[15] => $this->getDmig(),
			$keys[16] => $this->getTcomplet(),
			$keys[17] => $this->getDcomplet(),
			$keys[18] => $this->getTipusenviament(),
			$keys[19] => $this->getOrganitzador(),
			$keys[20] => $this->getCategories(),
			$keys[21] => $this->getResponsable(),
			$keys[22] => $this->getInfopractica(),
			$keys[23] => $this->getSiteId(),
			$keys[24] => $this->getActiu(),
			$keys[25] => $this->getIsentrada(),
			$keys[26] => $this->getPlaces(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ActivitatsPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setActivitatid($value);
				break;
			case 1:
				$this->setCiclesCicleid($value);
				break;
			case 2:
				$this->setTipusactivitatIdtipusactivitat($value);
				break;
			case 3:
				$this->setNom($value);
				break;
			case 4:
				$this->setPreu($value);
				break;
			case 5:
				$this->setPreureduit($value);
				break;
			case 6:
				$this->setPublicable($value);
				break;
			case 7:
				$this->setEstat($value);
				break;
			case 8:
				$this->setDescripcio($value);
				break;
			case 9:
				$this->setImatge($value);
				break;
			case 10:
				$this->setPdf($value);
				break;
			case 11:
				$this->setPublicaweb($value);
				break;
			case 12:
				$this->setTcurt($value);
				break;
			case 13:
				$this->setDcurt($value);
				break;
			case 14:
				$this->setTmig($value);
				break;
			case 15:
				$this->setDmig($value);
				break;
			case 16:
				$this->setTcomplet($value);
				break;
			case 17:
				$this->setDcomplet($value);
				break;
			case 18:
				$this->setTipusenviament($value);
				break;
			case 19:
				$this->setOrganitzador($value);
				break;
			case 20:
				$this->setCategories($value);
				break;
			case 21:
				$this->setResponsable($value);
				break;
			case 22:
				$this->setInfopractica($value);
				break;
			case 23:
				$this->setSiteId($value);
				break;
			case 24:
				$this->setActiu($value);
				break;
			case 25:
				$this->setIsentrada($value);
				break;
			case 26:
				$this->setPlaces($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ActivitatsPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setActivitatid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCiclesCicleid($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setTipusactivitatIdtipusactivitat($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setNom($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setPreu($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPreureduit($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPublicable($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setEstat($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDescripcio($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setImatge($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPdf($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setPublicaweb($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setTcurt($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDcurt($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setTmig($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setDmig($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setTcomplet($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setDcomplet($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setTipusenviament($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setOrganitzador($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCategories($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setResponsable($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setInfopractica($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setSiteId($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setActiu($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setIsentrada($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setPlaces($arr[$keys[26]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ActivitatsPeer::DATABASE_NAME);

		if ($this->isColumnModified(ActivitatsPeer::ACTIVITATID)) $criteria->add(ActivitatsPeer::ACTIVITATID, $this->activitatid);
		if ($this->isColumnModified(ActivitatsPeer::CICLES_CICLEID)) $criteria->add(ActivitatsPeer::CICLES_CICLEID, $this->cicles_cicleid);
		if ($this->isColumnModified(ActivitatsPeer::TIPUSACTIVITAT_IDTIPUSACTIVITAT)) $criteria->add(ActivitatsPeer::TIPUSACTIVITAT_IDTIPUSACTIVITAT, $this->tipusactivitat_idtipusactivitat);
		if ($this->isColumnModified(ActivitatsPeer::NOM)) $criteria->add(ActivitatsPeer::NOM, $this->nom);
		if ($this->isColumnModified(ActivitatsPeer::PREU)) $criteria->add(ActivitatsPeer::PREU, $this->preu);
		if ($this->isColumnModified(ActivitatsPeer::PREUREDUIT)) $criteria->add(ActivitatsPeer::PREUREDUIT, $this->preureduit);
		if ($this->isColumnModified(ActivitatsPeer::PUBLICABLE)) $criteria->add(ActivitatsPeer::PUBLICABLE, $this->publicable);
		if ($this->isColumnModified(ActivitatsPeer::ESTAT)) $criteria->add(ActivitatsPeer::ESTAT, $this->estat);
		if ($this->isColumnModified(ActivitatsPeer::DESCRIPCIO)) $criteria->add(ActivitatsPeer::DESCRIPCIO, $this->descripcio);
		if ($this->isColumnModified(ActivitatsPeer::IMATGE)) $criteria->add(ActivitatsPeer::IMATGE, $this->imatge);
		if ($this->isColumnModified(ActivitatsPeer::PDF)) $criteria->add(ActivitatsPeer::PDF, $this->pdf);
		if ($this->isColumnModified(ActivitatsPeer::PUBLICAWEB)) $criteria->add(ActivitatsPeer::PUBLICAWEB, $this->publicaweb);
		if ($this->isColumnModified(ActivitatsPeer::TCURT)) $criteria->add(ActivitatsPeer::TCURT, $this->tcurt);
		if ($this->isColumnModified(ActivitatsPeer::DCURT)) $criteria->add(ActivitatsPeer::DCURT, $this->dcurt);
		if ($this->isColumnModified(ActivitatsPeer::TMIG)) $criteria->add(ActivitatsPeer::TMIG, $this->tmig);
		if ($this->isColumnModified(ActivitatsPeer::DMIG)) $criteria->add(ActivitatsPeer::DMIG, $this->dmig);
		if ($this->isColumnModified(ActivitatsPeer::TCOMPLET)) $criteria->add(ActivitatsPeer::TCOMPLET, $this->tcomplet);
		if ($this->isColumnModified(ActivitatsPeer::DCOMPLET)) $criteria->add(ActivitatsPeer::DCOMPLET, $this->dcomplet);
		if ($this->isColumnModified(ActivitatsPeer::TIPUSENVIAMENT)) $criteria->add(ActivitatsPeer::TIPUSENVIAMENT, $this->tipusenviament);
		if ($this->isColumnModified(ActivitatsPeer::ORGANITZADOR)) $criteria->add(ActivitatsPeer::ORGANITZADOR, $this->organitzador);
		if ($this->isColumnModified(ActivitatsPeer::CATEGORIES)) $criteria->add(ActivitatsPeer::CATEGORIES, $this->categories);
		if ($this->isColumnModified(ActivitatsPeer::RESPONSABLE)) $criteria->add(ActivitatsPeer::RESPONSABLE, $this->responsable);
		if ($this->isColumnModified(ActivitatsPeer::INFOPRACTICA)) $criteria->add(ActivitatsPeer::INFOPRACTICA, $this->infopractica);
		if ($this->isColumnModified(ActivitatsPeer::SITE_ID)) $criteria->add(ActivitatsPeer::SITE_ID, $this->site_id);
		if ($this->isColumnModified(ActivitatsPeer::ACTIU)) $criteria->add(ActivitatsPeer::ACTIU, $this->actiu);
		if ($this->isColumnModified(ActivitatsPeer::ISENTRADA)) $criteria->add(ActivitatsPeer::ISENTRADA, $this->isentrada);
		if ($this->isColumnModified(ActivitatsPeer::PLACES)) $criteria->add(ActivitatsPeer::PLACES, $this->places);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ActivitatsPeer::DATABASE_NAME);

		$criteria->add(ActivitatsPeer::ACTIVITATID, $this->activitatid);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getActivitatid();
	}

	/**
	 * Generic method to set the primary key (activitatid column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setActivitatid($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Activitats (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCiclesCicleid($this->cicles_cicleid);

		$copyObj->setTipusactivitatIdtipusactivitat($this->tipusactivitat_idtipusactivitat);

		$copyObj->setNom($this->nom);

		$copyObj->setPreu($this->preu);

		$copyObj->setPreureduit($this->preureduit);

		$copyObj->setPublicable($this->publicable);

		$copyObj->setEstat($this->estat);

		$copyObj->setDescripcio($this->descripcio);

		$copyObj->setImatge($this->imatge);

		$copyObj->setPdf($this->pdf);

		$copyObj->setPublicaweb($this->publicaweb);

		$copyObj->setTcurt($this->tcurt);

		$copyObj->setDcurt($this->dcurt);

		$copyObj->setTmig($this->tmig);

		$copyObj->setDmig($this->dmig);

		$copyObj->setTcomplet($this->tcomplet);

		$copyObj->setDcomplet($this->dcomplet);

		$copyObj->setTipusenviament($this->tipusenviament);

		$copyObj->setOrganitzador($this->organitzador);

		$copyObj->setCategories($this->categories);

		$copyObj->setResponsable($this->responsable);

		$copyObj->setInfopractica($this->infopractica);

		$copyObj->setSiteId($this->site_id);

		$copyObj->setActiu($this->actiu);

		$copyObj->setIsentrada($this->isentrada);

		$copyObj->setPlaces($this->places);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getHorariss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addHoraris($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setActivitatid(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Activitats Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ActivitatsPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ActivitatsPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Cicles object.
	 *
	 * @param      Cicles $v
	 * @return     Activitats The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCicles(Cicles $v = null)
	{
		if ($v === null) {
			$this->setCiclesCicleid(NULL);
		} else {
			$this->setCiclesCicleid($v->getCicleid());
		}

		$this->aCicles = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Cicles object, it will not be re-added.
		if ($v !== null) {
			$v->addActivitats($this);
		}

		return $this;
	}


	/**
	 * Get the associated Cicles object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Cicles The associated Cicles object.
	 * @throws     PropelException
	 */
	public function getCicles(PropelPDO $con = null)
	{
		if ($this->aCicles === null && ($this->cicles_cicleid !== null)) {
			$this->aCicles = CiclesPeer::retrieveByPk($this->cicles_cicleid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCicles->addActivitatss($this);
			 */
		}
		return $this->aCicles;
	}

	/**
	 * Declares an association between this object and a Tipusactivitat object.
	 *
	 * @param      Tipusactivitat $v
	 * @return     Activitats The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTipusactivitat(Tipusactivitat $v = null)
	{
		if ($v === null) {
			$this->setTipusactivitatIdtipusactivitat(NULL);
		} else {
			$this->setTipusactivitatIdtipusactivitat($v->getIdtipusactivitat());
		}

		$this->aTipusactivitat = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Tipusactivitat object, it will not be re-added.
		if ($v !== null) {
			$v->addActivitats($this);
		}

		return $this;
	}


	/**
	 * Get the associated Tipusactivitat object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Tipusactivitat The associated Tipusactivitat object.
	 * @throws     PropelException
	 */
	public function getTipusactivitat(PropelPDO $con = null)
	{
		if ($this->aTipusactivitat === null && ($this->tipusactivitat_idtipusactivitat !== null)) {
			$this->aTipusactivitat = TipusactivitatPeer::retrieveByPk($this->tipusactivitat_idtipusactivitat);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTipusactivitat->addActivitatss($this);
			 */
		}
		return $this->aTipusactivitat;
	}

	/**
	 * Clears out the collHorariss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addHorariss()
	 */
	public function clearHorariss()
	{
		$this->collHorariss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collHorariss collection (array).
	 *
	 * By default this just sets the collHorariss collection to an empty array (like clearcollHorariss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initHorariss()
	{
		$this->collHorariss = array();
	}

	/**
	 * Gets an array of Horaris objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Activitats has previously been saved, it will retrieve
	 * related Horariss from storage. If this Activitats is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Horaris[]
	 * @throws     PropelException
	 */
	public function getHorariss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActivitatsPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHorariss === null) {
			if ($this->isNew()) {
			   $this->collHorariss = array();
			} else {

				$criteria->add(HorarisPeer::ACTIVITATS_ACTIVITATID, $this->activitatid);

				HorarisPeer::addSelectColumns($criteria);
				$this->collHorariss = HorarisPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(HorarisPeer::ACTIVITATS_ACTIVITATID, $this->activitatid);

				HorarisPeer::addSelectColumns($criteria);
				if (!isset($this->lastHorarisCriteria) || !$this->lastHorarisCriteria->equals($criteria)) {
					$this->collHorariss = HorarisPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastHorarisCriteria = $criteria;
		return $this->collHorariss;
	}

	/**
	 * Returns the number of related Horaris objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Horaris objects.
	 * @throws     PropelException
	 */
	public function countHorariss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ActivitatsPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collHorariss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(HorarisPeer::ACTIVITATS_ACTIVITATID, $this->activitatid);

				$count = HorarisPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(HorarisPeer::ACTIVITATS_ACTIVITATID, $this->activitatid);

				if (!isset($this->lastHorarisCriteria) || !$this->lastHorarisCriteria->equals($criteria)) {
					$count = HorarisPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collHorariss);
				}
			} else {
				$count = count($this->collHorariss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Horaris object to this object
	 * through the Horaris foreign key attribute.
	 *
	 * @param      Horaris $l Horaris
	 * @return     void
	 * @throws     PropelException
	 */
	public function addHoraris(Horaris $l)
	{
		if ($this->collHorariss === null) {
			$this->initHorariss();
		}
		if (!in_array($l, $this->collHorariss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collHorariss, $l);
			$l->setActivitats($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collHorariss) {
				foreach ((array) $this->collHorariss as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collHorariss = null;
			$this->aCicles = null;
			$this->aTipusactivitat = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseActivitats:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseActivitats::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseActivitats
