<?php

/**
 * Base class that represents a row from the 'tasques' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 10/07/10 14:19:30
 *
 * @package    lib.model.om
 */
abstract class BaseTasques extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TasquesPeer
	 */
	protected static $peer;

	/**
	 * The value for the tasquesid field.
	 * @var        int
	 */
	protected $tasquesid;

	/**
	 * The value for the activitats_activitatid field.
	 * @var        int
	 */
	protected $activitats_activitatid;

	/**
	 * The value for the quimana field.
	 * @var        int
	 */
	protected $quimana;

	/**
	 * The value for the quifa field.
	 * @var        int
	 */
	protected $quifa;

	/**
	 * The value for the titol field.
	 * @var        string
	 */
	protected $titol;

	/**
	 * The value for the accio field.
	 * @var        string
	 */
	protected $accio;

	/**
	 * The value for the reaccio field.
	 * @var        string
	 */
	protected $reaccio;

	/**
	 * The value for the estat field.
	 * @var        string
	 */
	protected $estat;

	/**
	 * The value for the aparicio field.
	 * @var        string
	 */
	protected $aparicio;

	/**
	 * The value for the desaparicio field.
	 * @var        string
	 */
	protected $desaparicio;

	/**
	 * The value for the dataresolucio field.
	 * @var        string
	 */
	protected $dataresolucio;

	/**
	 * The value for the isfeta field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $isfeta;

	/**
	 * The value for the altaregistre field.
	 * @var        string
	 */
	protected $altaregistre;

	/**
	 * @var        Activitats
	 */
	protected $aActivitats;

	/**
	 * @var        Usuaris
	 */
	protected $aUsuarisRelatedByQuimana;

	/**
	 * @var        Usuaris
	 */
	protected $aUsuarisRelatedByQuifa;

	/**
	 * @var        array Tasquescomentaris[] Collection to store aggregation of Tasquescomentaris objects.
	 */
	protected $collTasquescomentariss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTasquescomentariss.
	 */
	private $lastTasquescomentarisCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'TasquesPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->isfeta = 0;
	}

	/**
	 * Initializes internal state of BaseTasques object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [tasquesid] column value.
	 * 
	 * @return     int
	 */
	public function getTasquesid()
	{
		return $this->tasquesid;
	}

	/**
	 * Get the [activitats_activitatid] column value.
	 * 
	 * @return     int
	 */
	public function getActivitatsActivitatid()
	{
		return $this->activitats_activitatid;
	}

	/**
	 * Get the [quimana] column value.
	 * 
	 * @return     int
	 */
	public function getQuimana()
	{
		return $this->quimana;
	}

	/**
	 * Get the [quifa] column value.
	 * 
	 * @return     int
	 */
	public function getQuifa()
	{
		return $this->quifa;
	}

	/**
	 * Get the [titol] column value.
	 * 
	 * @return     string
	 */
	public function getTitol()
	{
		return $this->titol;
	}

	/**
	 * Get the [accio] column value.
	 * 
	 * @return     string
	 */
	public function getAccio()
	{
		return $this->accio;
	}

	/**
	 * Get the [reaccio] column value.
	 * 
	 * @return     string
	 */
	public function getReaccio()
	{
		return $this->reaccio;
	}

	/**
	 * Get the [estat] column value.
	 * 
	 * @return     string
	 */
	public function getEstat()
	{
		return $this->estat;
	}

	/**
	 * Get the [optionally formatted] temporal [aparicio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getAparicio($format = 'Y-m-d')
	{
		if ($this->aparicio === null) {
			return null;
		}


		if ($this->aparicio === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->aparicio);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->aparicio, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [desaparicio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDesaparicio($format = 'Y-m-d')
	{
		if ($this->desaparicio === null) {
			return null;
		}


		if ($this->desaparicio === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->desaparicio);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->desaparicio, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dataresolucio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataresolucio($format = 'Y-m-d H:i:s')
	{
		if ($this->dataresolucio === null) {
			return null;
		}


		if ($this->dataresolucio === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dataresolucio);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dataresolucio, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [isfeta] column value.
	 * 
	 * @return     int
	 */
	public function getIsfeta()
	{
		return $this->isfeta;
	}

	/**
	 * Get the [optionally formatted] temporal [altaregistre] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getAltaregistre($format = 'Y-m-d')
	{
		if ($this->altaregistre === null) {
			return null;
		}


		if ($this->altaregistre === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->altaregistre);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->altaregistre, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [tasquesid] column.
	 * 
	 * @param      int $v new value
	 * @return     Tasques The current object (for fluent API support)
	 */
	public function setTasquesid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tasquesid !== $v) {
			$this->tasquesid = $v;
			$this->modifiedColumns[] = TasquesPeer::TASQUESID;
		}

		return $this;
	} // setTasquesid()

	/**
	 * Set the value of [activitats_activitatid] column.
	 * 
	 * @param      int $v new value
	 * @return     Tasques The current object (for fluent API support)
	 */
	public function setActivitatsActivitatid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->activitats_activitatid !== $v) {
			$this->activitats_activitatid = $v;
			$this->modifiedColumns[] = TasquesPeer::ACTIVITATS_ACTIVITATID;
		}

		if ($this->aActivitats !== null && $this->aActivitats->getActivitatid() !== $v) {
			$this->aActivitats = null;
		}

		return $this;
	} // setActivitatsActivitatid()

	/**
	 * Set the value of [quimana] column.
	 * 
	 * @param      int $v new value
	 * @return     Tasques The current object (for fluent API support)
	 */
	public function setQuimana($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->quimana !== $v) {
			$this->quimana = $v;
			$this->modifiedColumns[] = TasquesPeer::QUIMANA;
		}

		if ($this->aUsuarisRelatedByQuimana !== null && $this->aUsuarisRelatedByQuimana->getUsuariid() !== $v) {
			$this->aUsuarisRelatedByQuimana = null;
		}

		return $this;
	} // setQuimana()

	/**
	 * Set the value of [quifa] column.
	 * 
	 * @param      int $v new value
	 * @return     Tasques The current object (for fluent API support)
	 */
	public function setQuifa($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->quifa !== $v) {
			$this->quifa = $v;
			$this->modifiedColumns[] = TasquesPeer::QUIFA;
		}

		if ($this->aUsuarisRelatedByQuifa !== null && $this->aUsuarisRelatedByQuifa->getUsuariid() !== $v) {
			$this->aUsuarisRelatedByQuifa = null;
		}

		return $this;
	} // setQuifa()

	/**
	 * Set the value of [titol] column.
	 * 
	 * @param      string $v new value
	 * @return     Tasques The current object (for fluent API support)
	 */
	public function setTitol($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->titol !== $v) {
			$this->titol = $v;
			$this->modifiedColumns[] = TasquesPeer::TITOL;
		}

		return $this;
	} // setTitol()

	/**
	 * Set the value of [accio] column.
	 * 
	 * @param      string $v new value
	 * @return     Tasques The current object (for fluent API support)
	 */
	public function setAccio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->accio !== $v) {
			$this->accio = $v;
			$this->modifiedColumns[] = TasquesPeer::ACCIO;
		}

		return $this;
	} // setAccio()

	/**
	 * Set the value of [reaccio] column.
	 * 
	 * @param      string $v new value
	 * @return     Tasques The current object (for fluent API support)
	 */
	public function setReaccio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reaccio !== $v) {
			$this->reaccio = $v;
			$this->modifiedColumns[] = TasquesPeer::REACCIO;
		}

		return $this;
	} // setReaccio()

	/**
	 * Set the value of [estat] column.
	 * 
	 * @param      string $v new value
	 * @return     Tasques The current object (for fluent API support)
	 */
	public function setEstat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->estat !== $v) {
			$this->estat = $v;
			$this->modifiedColumns[] = TasquesPeer::ESTAT;
		}

		return $this;
	} // setEstat()

	/**
	 * Sets the value of [aparicio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tasques The current object (for fluent API support)
	 */
	public function setAparicio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->aparicio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->aparicio !== null && $tmpDt = new DateTime($this->aparicio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->aparicio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TasquesPeer::APARICIO;
			}
		} // if either are not null

		return $this;
	} // setAparicio()

	/**
	 * Sets the value of [desaparicio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tasques The current object (for fluent API support)
	 */
	public function setDesaparicio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->desaparicio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->desaparicio !== null && $tmpDt = new DateTime($this->desaparicio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->desaparicio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TasquesPeer::DESAPARICIO;
			}
		} // if either are not null

		return $this;
	} // setDesaparicio()

	/**
	 * Sets the value of [dataresolucio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tasques The current object (for fluent API support)
	 */
	public function setDataresolucio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dataresolucio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dataresolucio !== null && $tmpDt = new DateTime($this->dataresolucio)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dataresolucio = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = TasquesPeer::DATARESOLUCIO;
			}
		} // if either are not null

		return $this;
	} // setDataresolucio()

	/**
	 * Set the value of [isfeta] column.
	 * 
	 * @param      int $v new value
	 * @return     Tasques The current object (for fluent API support)
	 */
	public function setIsfeta($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->isfeta !== $v || $this->isNew()) {
			$this->isfeta = $v;
			$this->modifiedColumns[] = TasquesPeer::ISFETA;
		}

		return $this;
	} // setIsfeta()

	/**
	 * Sets the value of [altaregistre] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Tasques The current object (for fluent API support)
	 */
	public function setAltaregistre($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->altaregistre !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->altaregistre !== null && $tmpDt = new DateTime($this->altaregistre)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->altaregistre = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TasquesPeer::ALTAREGISTRE;
			}
		} // if either are not null

		return $this;
	} // setAltaregistre()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->isfeta !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->tasquesid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->activitats_activitatid = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->quimana = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->quifa = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->titol = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->accio = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->reaccio = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->estat = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->aparicio = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->desaparicio = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->dataresolucio = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->isfeta = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->altaregistre = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 13; // 13 = TasquesPeer::NUM_COLUMNS - TasquesPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Tasques object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aActivitats !== null && $this->activitats_activitatid !== $this->aActivitats->getActivitatid()) {
			$this->aActivitats = null;
		}
		if ($this->aUsuarisRelatedByQuimana !== null && $this->quimana !== $this->aUsuarisRelatedByQuimana->getUsuariid()) {
			$this->aUsuarisRelatedByQuimana = null;
		}
		if ($this->aUsuarisRelatedByQuifa !== null && $this->quifa !== $this->aUsuarisRelatedByQuifa->getUsuariid()) {
			$this->aUsuarisRelatedByQuifa = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TasquesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TasquesPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aActivitats = null;
			$this->aUsuarisRelatedByQuimana = null;
			$this->aUsuarisRelatedByQuifa = null;
			$this->collTasquescomentariss = null;
			$this->lastTasquescomentarisCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TasquesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTasques:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				TasquesPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTasques:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TasquesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTasques:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTasques:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				TasquesPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aActivitats !== null) {
				if ($this->aActivitats->isModified() || $this->aActivitats->isNew()) {
					$affectedRows += $this->aActivitats->save($con);
				}
				$this->setActivitats($this->aActivitats);
			}

			if ($this->aUsuarisRelatedByQuimana !== null) {
				if ($this->aUsuarisRelatedByQuimana->isModified() || $this->aUsuarisRelatedByQuimana->isNew()) {
					$affectedRows += $this->aUsuarisRelatedByQuimana->save($con);
				}
				$this->setUsuarisRelatedByQuimana($this->aUsuarisRelatedByQuimana);
			}

			if ($this->aUsuarisRelatedByQuifa !== null) {
				if ($this->aUsuarisRelatedByQuifa->isModified() || $this->aUsuarisRelatedByQuifa->isNew()) {
					$affectedRows += $this->aUsuarisRelatedByQuifa->save($con);
				}
				$this->setUsuarisRelatedByQuifa($this->aUsuarisRelatedByQuifa);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = TasquesPeer::TASQUESID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TasquesPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setTasquesid($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += TasquesPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collTasquescomentariss !== null) {
				foreach ($this->collTasquescomentariss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aActivitats !== null) {
				if (!$this->aActivitats->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aActivitats->getValidationFailures());
				}
			}

			if ($this->aUsuarisRelatedByQuimana !== null) {
				if (!$this->aUsuarisRelatedByQuimana->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsuarisRelatedByQuimana->getValidationFailures());
				}
			}

			if ($this->aUsuarisRelatedByQuifa !== null) {
				if (!$this->aUsuarisRelatedByQuifa->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsuarisRelatedByQuifa->getValidationFailures());
				}
			}


			if (($retval = TasquesPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collTasquescomentariss !== null) {
					foreach ($this->collTasquescomentariss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TasquesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getTasquesid();
				break;
			case 1:
				return $this->getActivitatsActivitatid();
				break;
			case 2:
				return $this->getQuimana();
				break;
			case 3:
				return $this->getQuifa();
				break;
			case 4:
				return $this->getTitol();
				break;
			case 5:
				return $this->getAccio();
				break;
			case 6:
				return $this->getReaccio();
				break;
			case 7:
				return $this->getEstat();
				break;
			case 8:
				return $this->getAparicio();
				break;
			case 9:
				return $this->getDesaparicio();
				break;
			case 10:
				return $this->getDataresolucio();
				break;
			case 11:
				return $this->getIsfeta();
				break;
			case 12:
				return $this->getAltaregistre();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TasquesPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getTasquesid(),
			$keys[1] => $this->getActivitatsActivitatid(),
			$keys[2] => $this->getQuimana(),
			$keys[3] => $this->getQuifa(),
			$keys[4] => $this->getTitol(),
			$keys[5] => $this->getAccio(),
			$keys[6] => $this->getReaccio(),
			$keys[7] => $this->getEstat(),
			$keys[8] => $this->getAparicio(),
			$keys[9] => $this->getDesaparicio(),
			$keys[10] => $this->getDataresolucio(),
			$keys[11] => $this->getIsfeta(),
			$keys[12] => $this->getAltaregistre(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TasquesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setTasquesid($value);
				break;
			case 1:
				$this->setActivitatsActivitatid($value);
				break;
			case 2:
				$this->setQuimana($value);
				break;
			case 3:
				$this->setQuifa($value);
				break;
			case 4:
				$this->setTitol($value);
				break;
			case 5:
				$this->setAccio($value);
				break;
			case 6:
				$this->setReaccio($value);
				break;
			case 7:
				$this->setEstat($value);
				break;
			case 8:
				$this->setAparicio($value);
				break;
			case 9:
				$this->setDesaparicio($value);
				break;
			case 10:
				$this->setDataresolucio($value);
				break;
			case 11:
				$this->setIsfeta($value);
				break;
			case 12:
				$this->setAltaregistre($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TasquesPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setTasquesid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setActivitatsActivitatid($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setQuimana($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setQuifa($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setTitol($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAccio($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setReaccio($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setEstat($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setAparicio($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setDesaparicio($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setDataresolucio($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setIsfeta($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setAltaregistre($arr[$keys[12]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TasquesPeer::DATABASE_NAME);

		if ($this->isColumnModified(TasquesPeer::TASQUESID)) $criteria->add(TasquesPeer::TASQUESID, $this->tasquesid);
		if ($this->isColumnModified(TasquesPeer::ACTIVITATS_ACTIVITATID)) $criteria->add(TasquesPeer::ACTIVITATS_ACTIVITATID, $this->activitats_activitatid);
		if ($this->isColumnModified(TasquesPeer::QUIMANA)) $criteria->add(TasquesPeer::QUIMANA, $this->quimana);
		if ($this->isColumnModified(TasquesPeer::QUIFA)) $criteria->add(TasquesPeer::QUIFA, $this->quifa);
		if ($this->isColumnModified(TasquesPeer::TITOL)) $criteria->add(TasquesPeer::TITOL, $this->titol);
		if ($this->isColumnModified(TasquesPeer::ACCIO)) $criteria->add(TasquesPeer::ACCIO, $this->accio);
		if ($this->isColumnModified(TasquesPeer::REACCIO)) $criteria->add(TasquesPeer::REACCIO, $this->reaccio);
		if ($this->isColumnModified(TasquesPeer::ESTAT)) $criteria->add(TasquesPeer::ESTAT, $this->estat);
		if ($this->isColumnModified(TasquesPeer::APARICIO)) $criteria->add(TasquesPeer::APARICIO, $this->aparicio);
		if ($this->isColumnModified(TasquesPeer::DESAPARICIO)) $criteria->add(TasquesPeer::DESAPARICIO, $this->desaparicio);
		if ($this->isColumnModified(TasquesPeer::DATARESOLUCIO)) $criteria->add(TasquesPeer::DATARESOLUCIO, $this->dataresolucio);
		if ($this->isColumnModified(TasquesPeer::ISFETA)) $criteria->add(TasquesPeer::ISFETA, $this->isfeta);
		if ($this->isColumnModified(TasquesPeer::ALTAREGISTRE)) $criteria->add(TasquesPeer::ALTAREGISTRE, $this->altaregistre);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TasquesPeer::DATABASE_NAME);

		$criteria->add(TasquesPeer::TASQUESID, $this->tasquesid);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getTasquesid();
	}

	/**
	 * Generic method to set the primary key (tasquesid column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setTasquesid($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Tasques (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setActivitatsActivitatid($this->activitats_activitatid);

		$copyObj->setQuimana($this->quimana);

		$copyObj->setQuifa($this->quifa);

		$copyObj->setTitol($this->titol);

		$copyObj->setAccio($this->accio);

		$copyObj->setReaccio($this->reaccio);

		$copyObj->setEstat($this->estat);

		$copyObj->setAparicio($this->aparicio);

		$copyObj->setDesaparicio($this->desaparicio);

		$copyObj->setDataresolucio($this->dataresolucio);

		$copyObj->setIsfeta($this->isfeta);

		$copyObj->setAltaregistre($this->altaregistre);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getTasquescomentariss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTasquescomentaris($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setTasquesid(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Tasques Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TasquesPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TasquesPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Activitats object.
	 *
	 * @param      Activitats $v
	 * @return     Tasques The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setActivitats(Activitats $v = null)
	{
		if ($v === null) {
			$this->setActivitatsActivitatid(NULL);
		} else {
			$this->setActivitatsActivitatid($v->getActivitatid());
		}

		$this->aActivitats = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Activitats object, it will not be re-added.
		if ($v !== null) {
			$v->addTasques($this);
		}

		return $this;
	}


	/**
	 * Get the associated Activitats object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Activitats The associated Activitats object.
	 * @throws     PropelException
	 */
	public function getActivitats(PropelPDO $con = null)
	{
		if ($this->aActivitats === null && ($this->activitats_activitatid !== null)) {
			$this->aActivitats = ActivitatsPeer::retrieveByPk($this->activitats_activitatid);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aActivitats->addTasquess($this);
			 */
		}
		return $this->aActivitats;
	}

	/**
	 * Declares an association between this object and a Usuaris object.
	 *
	 * @param      Usuaris $v
	 * @return     Tasques The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsuarisRelatedByQuimana(Usuaris $v = null)
	{
		if ($v === null) {
			$this->setQuimana(NULL);
		} else {
			$this->setQuimana($v->getUsuariid());
		}

		$this->aUsuarisRelatedByQuimana = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Usuaris object, it will not be re-added.
		if ($v !== null) {
			$v->addTasquesRelatedByQuimana($this);
		}

		return $this;
	}


	/**
	 * Get the associated Usuaris object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Usuaris The associated Usuaris object.
	 * @throws     PropelException
	 */
	public function getUsuarisRelatedByQuimana(PropelPDO $con = null)
	{
		if ($this->aUsuarisRelatedByQuimana === null && ($this->quimana !== null)) {
			$this->aUsuarisRelatedByQuimana = UsuarisPeer::retrieveByPk($this->quimana);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUsuarisRelatedByQuimana->addTasquessRelatedByQuimana($this);
			 */
		}
		return $this->aUsuarisRelatedByQuimana;
	}

	/**
	 * Declares an association between this object and a Usuaris object.
	 *
	 * @param      Usuaris $v
	 * @return     Tasques The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsuarisRelatedByQuifa(Usuaris $v = null)
	{
		if ($v === null) {
			$this->setQuifa(NULL);
		} else {
			$this->setQuifa($v->getUsuariid());
		}

		$this->aUsuarisRelatedByQuifa = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Usuaris object, it will not be re-added.
		if ($v !== null) {
			$v->addTasquesRelatedByQuifa($this);
		}

		return $this;
	}


	/**
	 * Get the associated Usuaris object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Usuaris The associated Usuaris object.
	 * @throws     PropelException
	 */
	public function getUsuarisRelatedByQuifa(PropelPDO $con = null)
	{
		if ($this->aUsuarisRelatedByQuifa === null && ($this->quifa !== null)) {
			$this->aUsuarisRelatedByQuifa = UsuarisPeer::retrieveByPk($this->quifa);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUsuarisRelatedByQuifa->addTasquessRelatedByQuifa($this);
			 */
		}
		return $this->aUsuarisRelatedByQuifa;
	}

	/**
	 * Clears out the collTasquescomentariss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTasquescomentariss()
	 */
	public function clearTasquescomentariss()
	{
		$this->collTasquescomentariss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTasquescomentariss collection (array).
	 *
	 * By default this just sets the collTasquescomentariss collection to an empty array (like clearcollTasquescomentariss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTasquescomentariss()
	{
		$this->collTasquescomentariss = array();
	}

	/**
	 * Gets an array of Tasquescomentaris objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Tasques has previously been saved, it will retrieve
	 * related Tasquescomentariss from storage. If this Tasques is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tasquescomentaris[]
	 * @throws     PropelException
	 */
	public function getTasquescomentariss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TasquesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTasquescomentariss === null) {
			if ($this->isNew()) {
			   $this->collTasquescomentariss = array();
			} else {

				$criteria->add(TasquescomentarisPeer::TASQUES_TASQUESID, $this->tasquesid);

				TasquescomentarisPeer::addSelectColumns($criteria);
				$this->collTasquescomentariss = TasquescomentarisPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TasquescomentarisPeer::TASQUES_TASQUESID, $this->tasquesid);

				TasquescomentarisPeer::addSelectColumns($criteria);
				if (!isset($this->lastTasquescomentarisCriteria) || !$this->lastTasquescomentarisCriteria->equals($criteria)) {
					$this->collTasquescomentariss = TasquescomentarisPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTasquescomentarisCriteria = $criteria;
		return $this->collTasquescomentariss;
	}

	/**
	 * Returns the number of related Tasquescomentaris objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tasquescomentaris objects.
	 * @throws     PropelException
	 */
	public function countTasquescomentariss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TasquesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTasquescomentariss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TasquescomentarisPeer::TASQUES_TASQUESID, $this->tasquesid);

				$count = TasquescomentarisPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TasquescomentarisPeer::TASQUES_TASQUESID, $this->tasquesid);

				if (!isset($this->lastTasquescomentarisCriteria) || !$this->lastTasquescomentarisCriteria->equals($criteria)) {
					$count = TasquescomentarisPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTasquescomentariss);
				}
			} else {
				$count = count($this->collTasquescomentariss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tasquescomentaris object to this object
	 * through the Tasquescomentaris foreign key attribute.
	 *
	 * @param      Tasquescomentaris $l Tasquescomentaris
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTasquescomentaris(Tasquescomentaris $l)
	{
		if ($this->collTasquescomentariss === null) {
			$this->initTasquescomentariss();
		}
		if (!in_array($l, $this->collTasquescomentariss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTasquescomentariss, $l);
			$l->setTasques($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collTasquescomentariss) {
				foreach ((array) $this->collTasquescomentariss as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collTasquescomentariss = null;
			$this->aActivitats = null;
			$this->aUsuarisRelatedByQuimana = null;
			$this->aUsuarisRelatedByQuifa = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseTasques:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseTasques::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseTasques
