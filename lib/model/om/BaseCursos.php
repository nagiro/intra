<?php

/**
 * Base class that represents a row from the 'cursos' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 09/05/11 11:03:02
 *
 * @package    lib.model.om
 */
abstract class BaseCursos extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CursosPeer
	 */
	protected static $peer;

	/**
	 * The value for the idcursos field.
	 * @var        int
	 */
	protected $idcursos;

	/**
	 * The value for the titolcurs field.
	 * @var        string
	 */
	protected $titolcurs;

	/**
	 * The value for the isactiu field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $isactiu;

	/**
	 * The value for the places field.
	 * @var        int
	 */
	protected $places;

	/**
	 * The value for the codi field.
	 * @var        string
	 */
	protected $codi;

	/**
	 * The value for the descripcio field.
	 * @var        string
	 */
	protected $descripcio;

	/**
	 * The value for the preu field.
	 * @var        int
	 */
	protected $preu;

	/**
	 * The value for the preur field.
	 * @var        int
	 */
	protected $preur;

	/**
	 * The value for the horaris field.
	 * @var        string
	 */
	protected $horaris;

	/**
	 * The value for the categoria field.
	 * @var        string
	 */
	protected $categoria;

	/**
	 * The value for the ordresortida field.
	 * @var        int
	 */
	protected $ordresortida;

	/**
	 * The value for the dataaparicio field.
	 * @var        string
	 */
	protected $dataaparicio;

	/**
	 * The value for the datadesaparicio field.
	 * @var        string
	 */
	protected $datadesaparicio;

	/**
	 * The value for the datainmatricula field.
	 * @var        string
	 */
	protected $datainmatricula;

	/**
	 * The value for the datafimatricula field.
	 * @var        string
	 */
	protected $datafimatricula;

	/**
	 * The value for the datainici field.
	 * @var        string
	 */
	protected $datainici;

	/**
	 * The value for the visibleweb field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $visibleweb;

	/**
	 * The value for the site_id field.
	 * @var        int
	 */
	protected $site_id;

	/**
	 * The value for the actiu field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $actiu;

	/**
	 * The value for the activitat_id field.
	 * @var        int
	 */
	protected $activitat_id;

	/**
	 * The value for the isentrada field.
	 * @var        int
	 */
	protected $isentrada;

	/**
	 * The value for the pdf field.
	 * @var        string
	 */
	protected $pdf;

	/**
	 * The value for the adescomptes field.
	 * @var        string
	 */
	protected $adescomptes;

	/**
	 * @var        array Matricules[] Collection to store aggregation of Matricules objects.
	 */
	protected $collMatriculess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMatriculess.
	 */
	private $lastMatriculesCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'CursosPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->isactiu = 1;
		$this->visibleweb = 1;
		$this->actiu = 1;
	}

	/**
	 * Initializes internal state of BaseCursos object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [idcursos] column value.
	 * 
	 * @return     int
	 */
	public function getIdcursos()
	{
		return $this->idcursos;
	}

	/**
	 * Get the [titolcurs] column value.
	 * 
	 * @return     string
	 */
	public function getTitolcurs()
	{
		return $this->titolcurs;
	}

	/**
	 * Get the [isactiu] column value.
	 * 
	 * @return     int
	 */
	public function getIsactiu()
	{
		return $this->isactiu;
	}

	/**
	 * Get the [places] column value.
	 * 
	 * @return     int
	 */
	public function getPlaces()
	{
		return $this->places;
	}

	/**
	 * Get the [codi] column value.
	 * 
	 * @return     string
	 */
	public function getCodi()
	{
		return $this->codi;
	}

	/**
	 * Get the [descripcio] column value.
	 * 
	 * @return     string
	 */
	public function getDescripcio()
	{
		return $this->descripcio;
	}

	/**
	 * Get the [preu] column value.
	 * 
	 * @return     int
	 */
	public function getPreu()
	{
		return $this->preu;
	}

	/**
	 * Get the [preur] column value.
	 * 
	 * @return     int
	 */
	public function getPreur()
	{
		return $this->preur;
	}

	/**
	 * Get the [horaris] column value.
	 * 
	 * @return     string
	 */
	public function getHoraris()
	{
		return $this->horaris;
	}

	/**
	 * Get the [categoria] column value.
	 * 
	 * @return     string
	 */
	public function getCategoria()
	{
		return $this->categoria;
	}

	/**
	 * Get the [ordresortida] column value.
	 * 
	 * @return     int
	 */
	public function getOrdresortida()
	{
		return $this->ordresortida;
	}

	/**
	 * Get the [optionally formatted] temporal [dataaparicio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataaparicio($format = 'Y-m-d')
	{
		if ($this->dataaparicio === null) {
			return null;
		}


		if ($this->dataaparicio === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dataaparicio);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dataaparicio, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [datadesaparicio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatadesaparicio($format = 'Y-m-d')
	{
		if ($this->datadesaparicio === null) {
			return null;
		}


		if ($this->datadesaparicio === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datadesaparicio);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datadesaparicio, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [datainmatricula] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatainmatricula($format = 'Y-m-d')
	{
		if ($this->datainmatricula === null) {
			return null;
		}


		if ($this->datainmatricula === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datainmatricula);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datainmatricula, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [datafimatricula] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatafimatricula($format = 'Y-m-d')
	{
		if ($this->datafimatricula === null) {
			return null;
		}


		if ($this->datafimatricula === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datafimatricula);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datafimatricula, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [datainici] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatainici($format = 'Y-m-d')
	{
		if ($this->datainici === null) {
			return null;
		}


		if ($this->datainici === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datainici);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datainici, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [visibleweb] column value.
	 * 
	 * @return     int
	 */
	public function getVisibleweb()
	{
		return $this->visibleweb;
	}

	/**
	 * Get the [site_id] column value.
	 * 
	 * @return     int
	 */
	public function getSiteId()
	{
		return $this->site_id;
	}

	/**
	 * Get the [actiu] column value.
	 * 
	 * @return     int
	 */
	public function getActiu()
	{
		return $this->actiu;
	}

	/**
	 * Get the [activitat_id] column value.
	 * 
	 * @return     int
	 */
	public function getActivitatId()
	{
		return $this->activitat_id;
	}

	/**
	 * Get the [isentrada] column value.
	 * 
	 * @return     int
	 */
	public function getIsentrada()
	{
		return $this->isentrada;
	}

	/**
	 * Get the [pdf] column value.
	 * 
	 * @return     string
	 */
	public function getPdf()
	{
		return $this->pdf;
	}

	/**
	 * Get the [adescomptes] column value.
	 * 
	 * @return     string
	 */
	public function getAdescomptes()
	{
		return $this->adescomptes;
	}

	/**
	 * Set the value of [idcursos] column.
	 * 
	 * @param      int $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setIdcursos($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->idcursos !== $v) {
			$this->idcursos = $v;
			$this->modifiedColumns[] = CursosPeer::IDCURSOS;
		}

		return $this;
	} // setIdcursos()

	/**
	 * Set the value of [titolcurs] column.
	 * 
	 * @param      string $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setTitolcurs($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->titolcurs !== $v) {
			$this->titolcurs = $v;
			$this->modifiedColumns[] = CursosPeer::TITOLCURS;
		}

		return $this;
	} // setTitolcurs()

	/**
	 * Set the value of [isactiu] column.
	 * 
	 * @param      int $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setIsactiu($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->isactiu !== $v || $this->isNew()) {
			$this->isactiu = $v;
			$this->modifiedColumns[] = CursosPeer::ISACTIU;
		}

		return $this;
	} // setIsactiu()

	/**
	 * Set the value of [places] column.
	 * 
	 * @param      int $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setPlaces($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->places !== $v) {
			$this->places = $v;
			$this->modifiedColumns[] = CursosPeer::PLACES;
		}

		return $this;
	} // setPlaces()

	/**
	 * Set the value of [codi] column.
	 * 
	 * @param      string $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setCodi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->codi !== $v) {
			$this->codi = $v;
			$this->modifiedColumns[] = CursosPeer::CODI;
		}

		return $this;
	} // setCodi()

	/**
	 * Set the value of [descripcio] column.
	 * 
	 * @param      string $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setDescripcio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descripcio !== $v) {
			$this->descripcio = $v;
			$this->modifiedColumns[] = CursosPeer::DESCRIPCIO;
		}

		return $this;
	} // setDescripcio()

	/**
	 * Set the value of [preu] column.
	 * 
	 * @param      int $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setPreu($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->preu !== $v) {
			$this->preu = $v;
			$this->modifiedColumns[] = CursosPeer::PREU;
		}

		return $this;
	} // setPreu()

	/**
	 * Set the value of [preur] column.
	 * 
	 * @param      int $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setPreur($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->preur !== $v) {
			$this->preur = $v;
			$this->modifiedColumns[] = CursosPeer::PREUR;
		}

		return $this;
	} // setPreur()

	/**
	 * Set the value of [horaris] column.
	 * 
	 * @param      string $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setHoraris($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->horaris !== $v) {
			$this->horaris = $v;
			$this->modifiedColumns[] = CursosPeer::HORARIS;
		}

		return $this;
	} // setHoraris()

	/**
	 * Set the value of [categoria] column.
	 * 
	 * @param      string $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setCategoria($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->categoria !== $v) {
			$this->categoria = $v;
			$this->modifiedColumns[] = CursosPeer::CATEGORIA;
		}

		return $this;
	} // setCategoria()

	/**
	 * Set the value of [ordresortida] column.
	 * 
	 * @param      int $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setOrdresortida($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ordresortida !== $v) {
			$this->ordresortida = $v;
			$this->modifiedColumns[] = CursosPeer::ORDRESORTIDA;
		}

		return $this;
	} // setOrdresortida()

	/**
	 * Sets the value of [dataaparicio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setDataaparicio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dataaparicio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dataaparicio !== null && $tmpDt = new DateTime($this->dataaparicio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dataaparicio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CursosPeer::DATAAPARICIO;
			}
		} // if either are not null

		return $this;
	} // setDataaparicio()

	/**
	 * Sets the value of [datadesaparicio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setDatadesaparicio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datadesaparicio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datadesaparicio !== null && $tmpDt = new DateTime($this->datadesaparicio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datadesaparicio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CursosPeer::DATADESAPARICIO;
			}
		} // if either are not null

		return $this;
	} // setDatadesaparicio()

	/**
	 * Sets the value of [datainmatricula] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setDatainmatricula($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datainmatricula !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datainmatricula !== null && $tmpDt = new DateTime($this->datainmatricula)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datainmatricula = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CursosPeer::DATAINMATRICULA;
			}
		} // if either are not null

		return $this;
	} // setDatainmatricula()

	/**
	 * Sets the value of [datafimatricula] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setDatafimatricula($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datafimatricula !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datafimatricula !== null && $tmpDt = new DateTime($this->datafimatricula)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datafimatricula = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CursosPeer::DATAFIMATRICULA;
			}
		} // if either are not null

		return $this;
	} // setDatafimatricula()

	/**
	 * Sets the value of [datainici] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setDatainici($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datainici !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datainici !== null && $tmpDt = new DateTime($this->datainici)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datainici = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CursosPeer::DATAINICI;
			}
		} // if either are not null

		return $this;
	} // setDatainici()

	/**
	 * Set the value of [visibleweb] column.
	 * 
	 * @param      int $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setVisibleweb($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->visibleweb !== $v || $this->isNew()) {
			$this->visibleweb = $v;
			$this->modifiedColumns[] = CursosPeer::VISIBLEWEB;
		}

		return $this;
	} // setVisibleweb()

	/**
	 * Set the value of [site_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setSiteId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->site_id !== $v) {
			$this->site_id = $v;
			$this->modifiedColumns[] = CursosPeer::SITE_ID;
		}

		return $this;
	} // setSiteId()

	/**
	 * Set the value of [actiu] column.
	 * 
	 * @param      int $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setActiu($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->actiu !== $v || $this->isNew()) {
			$this->actiu = $v;
			$this->modifiedColumns[] = CursosPeer::ACTIU;
		}

		return $this;
	} // setActiu()

	/**
	 * Set the value of [activitat_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setActivitatId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->activitat_id !== $v) {
			$this->activitat_id = $v;
			$this->modifiedColumns[] = CursosPeer::ACTIVITAT_ID;
		}

		return $this;
	} // setActivitatId()

	/**
	 * Set the value of [isentrada] column.
	 * 
	 * @param      int $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setIsentrada($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->isentrada !== $v) {
			$this->isentrada = $v;
			$this->modifiedColumns[] = CursosPeer::ISENTRADA;
		}

		return $this;
	} // setIsentrada()

	/**
	 * Set the value of [pdf] column.
	 * 
	 * @param      string $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setPdf($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pdf !== $v) {
			$this->pdf = $v;
			$this->modifiedColumns[] = CursosPeer::PDF;
		}

		return $this;
	} // setPdf()

	/**
	 * Set the value of [adescomptes] column.
	 * 
	 * @param      string $v new value
	 * @return     Cursos The current object (for fluent API support)
	 */
	public function setAdescomptes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->adescomptes !== $v) {
			$this->adescomptes = $v;
			$this->modifiedColumns[] = CursosPeer::ADESCOMPTES;
		}

		return $this;
	} // setAdescomptes()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->isactiu !== 1) {
				return false;
			}

			if ($this->visibleweb !== 1) {
				return false;
			}

			if ($this->actiu !== 1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->idcursos = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->titolcurs = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->isactiu = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->places = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->codi = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->descripcio = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->preu = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->preur = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->horaris = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->categoria = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->ordresortida = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->dataaparicio = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->datadesaparicio = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->datainmatricula = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->datafimatricula = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->datainici = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->visibleweb = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->site_id = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->actiu = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->activitat_id = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->isentrada = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->pdf = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->adescomptes = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 23; // 23 = CursosPeer::NUM_COLUMNS - CursosPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Cursos object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CursosPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CursosPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collMatriculess = null;
			$this->lastMatriculesCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CursosPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCursos:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				CursosPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCursos:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CursosPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCursos:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCursos:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				CursosPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CursosPeer::IDCURSOS;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CursosPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setIdcursos($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CursosPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collMatriculess !== null) {
				foreach ($this->collMatriculess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = CursosPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collMatriculess !== null) {
					foreach ($this->collMatriculess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CursosPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdcursos();
				break;
			case 1:
				return $this->getTitolcurs();
				break;
			case 2:
				return $this->getIsactiu();
				break;
			case 3:
				return $this->getPlaces();
				break;
			case 4:
				return $this->getCodi();
				break;
			case 5:
				return $this->getDescripcio();
				break;
			case 6:
				return $this->getPreu();
				break;
			case 7:
				return $this->getPreur();
				break;
			case 8:
				return $this->getHoraris();
				break;
			case 9:
				return $this->getCategoria();
				break;
			case 10:
				return $this->getOrdresortida();
				break;
			case 11:
				return $this->getDataaparicio();
				break;
			case 12:
				return $this->getDatadesaparicio();
				break;
			case 13:
				return $this->getDatainmatricula();
				break;
			case 14:
				return $this->getDatafimatricula();
				break;
			case 15:
				return $this->getDatainici();
				break;
			case 16:
				return $this->getVisibleweb();
				break;
			case 17:
				return $this->getSiteId();
				break;
			case 18:
				return $this->getActiu();
				break;
			case 19:
				return $this->getActivitatId();
				break;
			case 20:
				return $this->getIsentrada();
				break;
			case 21:
				return $this->getPdf();
				break;
			case 22:
				return $this->getAdescomptes();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CursosPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIdcursos(),
			$keys[1] => $this->getTitolcurs(),
			$keys[2] => $this->getIsactiu(),
			$keys[3] => $this->getPlaces(),
			$keys[4] => $this->getCodi(),
			$keys[5] => $this->getDescripcio(),
			$keys[6] => $this->getPreu(),
			$keys[7] => $this->getPreur(),
			$keys[8] => $this->getHoraris(),
			$keys[9] => $this->getCategoria(),
			$keys[10] => $this->getOrdresortida(),
			$keys[11] => $this->getDataaparicio(),
			$keys[12] => $this->getDatadesaparicio(),
			$keys[13] => $this->getDatainmatricula(),
			$keys[14] => $this->getDatafimatricula(),
			$keys[15] => $this->getDatainici(),
			$keys[16] => $this->getVisibleweb(),
			$keys[17] => $this->getSiteId(),
			$keys[18] => $this->getActiu(),
			$keys[19] => $this->getActivitatId(),
			$keys[20] => $this->getIsentrada(),
			$keys[21] => $this->getPdf(),
			$keys[22] => $this->getAdescomptes(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CursosPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdcursos($value);
				break;
			case 1:
				$this->setTitolcurs($value);
				break;
			case 2:
				$this->setIsactiu($value);
				break;
			case 3:
				$this->setPlaces($value);
				break;
			case 4:
				$this->setCodi($value);
				break;
			case 5:
				$this->setDescripcio($value);
				break;
			case 6:
				$this->setPreu($value);
				break;
			case 7:
				$this->setPreur($value);
				break;
			case 8:
				$this->setHoraris($value);
				break;
			case 9:
				$this->setCategoria($value);
				break;
			case 10:
				$this->setOrdresortida($value);
				break;
			case 11:
				$this->setDataaparicio($value);
				break;
			case 12:
				$this->setDatadesaparicio($value);
				break;
			case 13:
				$this->setDatainmatricula($value);
				break;
			case 14:
				$this->setDatafimatricula($value);
				break;
			case 15:
				$this->setDatainici($value);
				break;
			case 16:
				$this->setVisibleweb($value);
				break;
			case 17:
				$this->setSiteId($value);
				break;
			case 18:
				$this->setActiu($value);
				break;
			case 19:
				$this->setActivitatId($value);
				break;
			case 20:
				$this->setIsentrada($value);
				break;
			case 21:
				$this->setPdf($value);
				break;
			case 22:
				$this->setAdescomptes($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CursosPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdcursos($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setTitolcurs($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIsactiu($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setPlaces($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCodi($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDescripcio($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPreu($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPreur($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setHoraris($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCategoria($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setOrdresortida($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDataaparicio($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setDatadesaparicio($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDatainmatricula($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDatafimatricula($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setDatainici($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setVisibleweb($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setSiteId($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setActiu($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setActivitatId($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setIsentrada($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setPdf($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setAdescomptes($arr[$keys[22]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CursosPeer::DATABASE_NAME);

		if ($this->isColumnModified(CursosPeer::IDCURSOS)) $criteria->add(CursosPeer::IDCURSOS, $this->idcursos);
		if ($this->isColumnModified(CursosPeer::TITOLCURS)) $criteria->add(CursosPeer::TITOLCURS, $this->titolcurs);
		if ($this->isColumnModified(CursosPeer::ISACTIU)) $criteria->add(CursosPeer::ISACTIU, $this->isactiu);
		if ($this->isColumnModified(CursosPeer::PLACES)) $criteria->add(CursosPeer::PLACES, $this->places);
		if ($this->isColumnModified(CursosPeer::CODI)) $criteria->add(CursosPeer::CODI, $this->codi);
		if ($this->isColumnModified(CursosPeer::DESCRIPCIO)) $criteria->add(CursosPeer::DESCRIPCIO, $this->descripcio);
		if ($this->isColumnModified(CursosPeer::PREU)) $criteria->add(CursosPeer::PREU, $this->preu);
		if ($this->isColumnModified(CursosPeer::PREUR)) $criteria->add(CursosPeer::PREUR, $this->preur);
		if ($this->isColumnModified(CursosPeer::HORARIS)) $criteria->add(CursosPeer::HORARIS, $this->horaris);
		if ($this->isColumnModified(CursosPeer::CATEGORIA)) $criteria->add(CursosPeer::CATEGORIA, $this->categoria);
		if ($this->isColumnModified(CursosPeer::ORDRESORTIDA)) $criteria->add(CursosPeer::ORDRESORTIDA, $this->ordresortida);
		if ($this->isColumnModified(CursosPeer::DATAAPARICIO)) $criteria->add(CursosPeer::DATAAPARICIO, $this->dataaparicio);
		if ($this->isColumnModified(CursosPeer::DATADESAPARICIO)) $criteria->add(CursosPeer::DATADESAPARICIO, $this->datadesaparicio);
		if ($this->isColumnModified(CursosPeer::DATAINMATRICULA)) $criteria->add(CursosPeer::DATAINMATRICULA, $this->datainmatricula);
		if ($this->isColumnModified(CursosPeer::DATAFIMATRICULA)) $criteria->add(CursosPeer::DATAFIMATRICULA, $this->datafimatricula);
		if ($this->isColumnModified(CursosPeer::DATAINICI)) $criteria->add(CursosPeer::DATAINICI, $this->datainici);
		if ($this->isColumnModified(CursosPeer::VISIBLEWEB)) $criteria->add(CursosPeer::VISIBLEWEB, $this->visibleweb);
		if ($this->isColumnModified(CursosPeer::SITE_ID)) $criteria->add(CursosPeer::SITE_ID, $this->site_id);
		if ($this->isColumnModified(CursosPeer::ACTIU)) $criteria->add(CursosPeer::ACTIU, $this->actiu);
		if ($this->isColumnModified(CursosPeer::ACTIVITAT_ID)) $criteria->add(CursosPeer::ACTIVITAT_ID, $this->activitat_id);
		if ($this->isColumnModified(CursosPeer::ISENTRADA)) $criteria->add(CursosPeer::ISENTRADA, $this->isentrada);
		if ($this->isColumnModified(CursosPeer::PDF)) $criteria->add(CursosPeer::PDF, $this->pdf);
		if ($this->isColumnModified(CursosPeer::ADESCOMPTES)) $criteria->add(CursosPeer::ADESCOMPTES, $this->adescomptes);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CursosPeer::DATABASE_NAME);

		$criteria->add(CursosPeer::IDCURSOS, $this->idcursos);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdcursos();
	}

	/**
	 * Generic method to set the primary key (idcursos column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdcursos($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Cursos (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setTitolcurs($this->titolcurs);

		$copyObj->setIsactiu($this->isactiu);

		$copyObj->setPlaces($this->places);

		$copyObj->setCodi($this->codi);

		$copyObj->setDescripcio($this->descripcio);

		$copyObj->setPreu($this->preu);

		$copyObj->setPreur($this->preur);

		$copyObj->setHoraris($this->horaris);

		$copyObj->setCategoria($this->categoria);

		$copyObj->setOrdresortida($this->ordresortida);

		$copyObj->setDataaparicio($this->dataaparicio);

		$copyObj->setDatadesaparicio($this->datadesaparicio);

		$copyObj->setDatainmatricula($this->datainmatricula);

		$copyObj->setDatafimatricula($this->datafimatricula);

		$copyObj->setDatainici($this->datainici);

		$copyObj->setVisibleweb($this->visibleweb);

		$copyObj->setSiteId($this->site_id);

		$copyObj->setActiu($this->actiu);

		$copyObj->setActivitatId($this->activitat_id);

		$copyObj->setIsentrada($this->isentrada);

		$copyObj->setPdf($this->pdf);

		$copyObj->setAdescomptes($this->adescomptes);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getMatriculess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMatricules($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setIdcursos(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Cursos Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CursosPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CursosPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collMatriculess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMatriculess()
	 */
	public function clearMatriculess()
	{
		$this->collMatriculess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMatriculess collection (array).
	 *
	 * By default this just sets the collMatriculess collection to an empty array (like clearcollMatriculess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMatriculess()
	{
		$this->collMatriculess = array();
	}

	/**
	 * Gets an array of Matricules objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Cursos has previously been saved, it will retrieve
	 * related Matriculess from storage. If this Cursos is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Matricules[]
	 * @throws     PropelException
	 */
	public function getMatriculess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CursosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMatriculess === null) {
			if ($this->isNew()) {
			   $this->collMatriculess = array();
			} else {

				$criteria->add(MatriculesPeer::CURSOS_IDCURSOS, $this->idcursos);

				MatriculesPeer::addSelectColumns($criteria);
				$this->collMatriculess = MatriculesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MatriculesPeer::CURSOS_IDCURSOS, $this->idcursos);

				MatriculesPeer::addSelectColumns($criteria);
				if (!isset($this->lastMatriculesCriteria) || !$this->lastMatriculesCriteria->equals($criteria)) {
					$this->collMatriculess = MatriculesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMatriculesCriteria = $criteria;
		return $this->collMatriculess;
	}

	/**
	 * Returns the number of related Matricules objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Matricules objects.
	 * @throws     PropelException
	 */
	public function countMatriculess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CursosPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMatriculess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MatriculesPeer::CURSOS_IDCURSOS, $this->idcursos);

				$count = MatriculesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MatriculesPeer::CURSOS_IDCURSOS, $this->idcursos);

				if (!isset($this->lastMatriculesCriteria) || !$this->lastMatriculesCriteria->equals($criteria)) {
					$count = MatriculesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collMatriculess);
				}
			} else {
				$count = count($this->collMatriculess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Matricules object to this object
	 * through the Matricules foreign key attribute.
	 *
	 * @param      Matricules $l Matricules
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMatricules(Matricules $l)
	{
		if ($this->collMatriculess === null) {
			$this->initMatriculess();
		}
		if (!in_array($l, $this->collMatriculess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMatriculess, $l);
			$l->setCursos($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Cursos is new, it will return
	 * an empty collection; or if this Cursos has previously
	 * been saved, it will retrieve related Matriculess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Cursos.
	 */
	public function getMatriculessJoinUsuaris($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CursosPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMatriculess === null) {
			if ($this->isNew()) {
				$this->collMatriculess = array();
			} else {

				$criteria->add(MatriculesPeer::CURSOS_IDCURSOS, $this->idcursos);

				$this->collMatriculess = MatriculesPeer::doSelectJoinUsuaris($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MatriculesPeer::CURSOS_IDCURSOS, $this->idcursos);

			if (!isset($this->lastMatriculesCriteria) || !$this->lastMatriculesCriteria->equals($criteria)) {
				$this->collMatriculess = MatriculesPeer::doSelectJoinUsuaris($criteria, $con, $join_behavior);
			}
		}
		$this->lastMatriculesCriteria = $criteria;

		return $this->collMatriculess;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collMatriculess) {
				foreach ((array) $this->collMatriculess as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collMatriculess = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseCursos:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseCursos::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseCursos
