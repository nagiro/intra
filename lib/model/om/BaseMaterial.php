<?php

/**
 * Base class that represents a row from the 'material' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/08/11 10:10:23
 *
 * @package    lib.model.om
 */
abstract class BaseMaterial extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        MaterialPeer
	 */
	protected static $peer;

	/**
	 * The value for the idmaterial field.
	 * @var        int
	 */
	protected $idmaterial;

	/**
	 * The value for the materialgeneric_idmaterialgeneric field.
	 * @var        int
	 */
	protected $materialgeneric_idmaterialgeneric;

	/**
	 * The value for the nom field.
	 * @var        string
	 */
	protected $nom;

	/**
	 * The value for the descripcio field.
	 * @var        string
	 */
	protected $descripcio;

	/**
	 * The value for the responsable field.
	 * @var        string
	 */
	protected $responsable;

	/**
	 * The value for the ubicacio field.
	 * @var        string
	 */
	protected $ubicacio;

	/**
	 * The value for the datacompra field.
	 * @var        string
	 */
	protected $datacompra;

	/**
	 * The value for the identificador field.
	 * @var        string
	 */
	protected $identificador;

	/**
	 * The value for the numserie field.
	 * @var        string
	 */
	protected $numserie;

	/**
	 * The value for the datagarantia field.
	 * @var        string
	 */
	protected $datagarantia;

	/**
	 * The value for the datarevisio field.
	 * @var        string
	 */
	protected $datarevisio;

	/**
	 * The value for the cedit field.
	 * @var        string
	 */
	protected $cedit;

	/**
	 * The value for the datacessio field.
	 * @var        string
	 */
	protected $datacessio;

	/**
	 * The value for the dataretorn field.
	 * @var        string
	 */
	protected $dataretorn;

	/**
	 * The value for the numfactura field.
	 * @var        string
	 */
	protected $numfactura;

	/**
	 * The value for the preu field.
	 * @var        double
	 */
	protected $preu;

	/**
	 * The value for the notesmanteniment field.
	 * @var        string
	 */
	protected $notesmanteniment;

	/**
	 * The value for the databaixa field.
	 * @var        string
	 */
	protected $databaixa;

	/**
	 * The value for the datareparacio field.
	 * @var        string
	 */
	protected $datareparacio;

	/**
	 * The value for the disponible field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $disponible;

	/**
	 * The value for the altaregistre field.
	 * @var        string
	 */
	protected $altaregistre;

	/**
	 * The value for the istransferible field.
	 * @var        int
	 */
	protected $istransferible;

	/**
	 * The value for the isadministratiu field.
	 * @var        int
	 */
	protected $isadministratiu;

	/**
	 * The value for the site_id field.
	 * @var        int
	 */
	protected $site_id;

	/**
	 * The value for the actiu field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $actiu;

	/**
	 * The value for the unitats field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $unitats;

	/**
	 * @var        Materialgeneric
	 */
	protected $aMaterialgeneric;

	/**
	 * @var        array Cessiomaterial[] Collection to store aggregation of Cessiomaterial objects.
	 */
	protected $collCessiomaterials;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCessiomaterials.
	 */
	private $lastCessiomaterialCriteria = null;

	/**
	 * @var        array Horarisespais[] Collection to store aggregation of Horarisespais objects.
	 */
	protected $collHorarisespaiss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collHorarisespaiss.
	 */
	private $lastHorarisespaisCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'MaterialPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->disponible = 1;
		$this->actiu = 1;
		$this->unitats = 1;
	}

	/**
	 * Initializes internal state of BaseMaterial object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [idmaterial] column value.
	 * 
	 * @return     int
	 */
	public function getIdmaterial()
	{
		return $this->idmaterial;
	}

	/**
	 * Get the [materialgeneric_idmaterialgeneric] column value.
	 * 
	 * @return     int
	 */
	public function getMaterialgenericIdmaterialgeneric()
	{
		return $this->materialgeneric_idmaterialgeneric;
	}

	/**
	 * Get the [nom] column value.
	 * 
	 * @return     string
	 */
	public function getNom()
	{
		return $this->nom;
	}

	/**
	 * Get the [descripcio] column value.
	 * 
	 * @return     string
	 */
	public function getDescripcio()
	{
		return $this->descripcio;
	}

	/**
	 * Get the [responsable] column value.
	 * 
	 * @return     string
	 */
	public function getResponsable()
	{
		return $this->responsable;
	}

	/**
	 * Get the [ubicacio] column value.
	 * 
	 * @return     string
	 */
	public function getUbicacio()
	{
		return $this->ubicacio;
	}

	/**
	 * Get the [optionally formatted] temporal [datacompra] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatacompra($format = 'Y-m-d')
	{
		if ($this->datacompra === null) {
			return null;
		}


		if ($this->datacompra === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datacompra);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datacompra, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [identificador] column value.
	 * 
	 * @return     string
	 */
	public function getIdentificador()
	{
		return $this->identificador;
	}

	/**
	 * Get the [numserie] column value.
	 * 
	 * @return     string
	 */
	public function getNumserie()
	{
		return $this->numserie;
	}

	/**
	 * Get the [optionally formatted] temporal [datagarantia] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatagarantia($format = 'Y-m-d')
	{
		if ($this->datagarantia === null) {
			return null;
		}


		if ($this->datagarantia === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datagarantia);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datagarantia, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [datarevisio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatarevisio($format = 'Y-m-d')
	{
		if ($this->datarevisio === null) {
			return null;
		}


		if ($this->datarevisio === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datarevisio);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datarevisio, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [cedit] column value.
	 * 
	 * @return     string
	 */
	public function getCedit()
	{
		return $this->cedit;
	}

	/**
	 * Get the [optionally formatted] temporal [datacessio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatacessio($format = 'Y-m-d')
	{
		if ($this->datacessio === null) {
			return null;
		}


		if ($this->datacessio === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datacessio);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datacessio, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dataretorn] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataretorn($format = 'Y-m-d')
	{
		if ($this->dataretorn === null) {
			return null;
		}


		if ($this->dataretorn === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dataretorn);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dataretorn, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [numfactura] column value.
	 * 
	 * @return     string
	 */
	public function getNumfactura()
	{
		return $this->numfactura;
	}

	/**
	 * Get the [preu] column value.
	 * 
	 * @return     double
	 */
	public function getPreu()
	{
		return $this->preu;
	}

	/**
	 * Get the [notesmanteniment] column value.
	 * 
	 * @return     string
	 */
	public function getNotesmanteniment()
	{
		return $this->notesmanteniment;
	}

	/**
	 * Get the [optionally formatted] temporal [databaixa] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatabaixa($format = 'Y-m-d')
	{
		if ($this->databaixa === null) {
			return null;
		}


		if ($this->databaixa === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->databaixa);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->databaixa, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [datareparacio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDatareparacio($format = 'Y-m-d')
	{
		if ($this->datareparacio === null) {
			return null;
		}


		if ($this->datareparacio === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->datareparacio);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datareparacio, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [disponible] column value.
	 * 
	 * @return     int
	 */
	public function getDisponible()
	{
		return $this->disponible;
	}

	/**
	 * Get the [optionally formatted] temporal [altaregistre] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getAltaregistre($format = 'Y-m-d')
	{
		if ($this->altaregistre === null) {
			return null;
		}


		if ($this->altaregistre === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->altaregistre);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->altaregistre, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [istransferible] column value.
	 * 
	 * @return     int
	 */
	public function getIstransferible()
	{
		return $this->istransferible;
	}

	/**
	 * Get the [isadministratiu] column value.
	 * 
	 * @return     int
	 */
	public function getIsadministratiu()
	{
		return $this->isadministratiu;
	}

	/**
	 * Get the [site_id] column value.
	 * 
	 * @return     int
	 */
	public function getSiteId()
	{
		return $this->site_id;
	}

	/**
	 * Get the [actiu] column value.
	 * 
	 * @return     int
	 */
	public function getActiu()
	{
		return $this->actiu;
	}

	/**
	 * Get the [unitats] column value.
	 * 
	 * @return     int
	 */
	public function getUnitats()
	{
		return $this->unitats;
	}

	/**
	 * Set the value of [idmaterial] column.
	 * 
	 * @param      int $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setIdmaterial($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->idmaterial !== $v) {
			$this->idmaterial = $v;
			$this->modifiedColumns[] = MaterialPeer::IDMATERIAL;
		}

		return $this;
	} // setIdmaterial()

	/**
	 * Set the value of [materialgeneric_idmaterialgeneric] column.
	 * 
	 * @param      int $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setMaterialgenericIdmaterialgeneric($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->materialgeneric_idmaterialgeneric !== $v) {
			$this->materialgeneric_idmaterialgeneric = $v;
			$this->modifiedColumns[] = MaterialPeer::MATERIALGENERIC_IDMATERIALGENERIC;
		}

		if ($this->aMaterialgeneric !== null && $this->aMaterialgeneric->getIdmaterialgeneric() !== $v) {
			$this->aMaterialgeneric = null;
		}

		return $this;
	} // setMaterialgenericIdmaterialgeneric()

	/**
	 * Set the value of [nom] column.
	 * 
	 * @param      string $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setNom($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nom !== $v) {
			$this->nom = $v;
			$this->modifiedColumns[] = MaterialPeer::NOM;
		}

		return $this;
	} // setNom()

	/**
	 * Set the value of [descripcio] column.
	 * 
	 * @param      string $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setDescripcio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descripcio !== $v) {
			$this->descripcio = $v;
			$this->modifiedColumns[] = MaterialPeer::DESCRIPCIO;
		}

		return $this;
	} // setDescripcio()

	/**
	 * Set the value of [responsable] column.
	 * 
	 * @param      string $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setResponsable($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->responsable !== $v) {
			$this->responsable = $v;
			$this->modifiedColumns[] = MaterialPeer::RESPONSABLE;
		}

		return $this;
	} // setResponsable()

	/**
	 * Set the value of [ubicacio] column.
	 * 
	 * @param      string $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setUbicacio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ubicacio !== $v) {
			$this->ubicacio = $v;
			$this->modifiedColumns[] = MaterialPeer::UBICACIO;
		}

		return $this;
	} // setUbicacio()

	/**
	 * Sets the value of [datacompra] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Material The current object (for fluent API support)
	 */
	public function setDatacompra($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datacompra !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datacompra !== null && $tmpDt = new DateTime($this->datacompra)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datacompra = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MaterialPeer::DATACOMPRA;
			}
		} // if either are not null

		return $this;
	} // setDatacompra()

	/**
	 * Set the value of [identificador] column.
	 * 
	 * @param      string $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setIdentificador($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->identificador !== $v) {
			$this->identificador = $v;
			$this->modifiedColumns[] = MaterialPeer::IDENTIFICADOR;
		}

		return $this;
	} // setIdentificador()

	/**
	 * Set the value of [numserie] column.
	 * 
	 * @param      string $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setNumserie($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->numserie !== $v) {
			$this->numserie = $v;
			$this->modifiedColumns[] = MaterialPeer::NUMSERIE;
		}

		return $this;
	} // setNumserie()

	/**
	 * Sets the value of [datagarantia] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Material The current object (for fluent API support)
	 */
	public function setDatagarantia($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datagarantia !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datagarantia !== null && $tmpDt = new DateTime($this->datagarantia)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datagarantia = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MaterialPeer::DATAGARANTIA;
			}
		} // if either are not null

		return $this;
	} // setDatagarantia()

	/**
	 * Sets the value of [datarevisio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Material The current object (for fluent API support)
	 */
	public function setDatarevisio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datarevisio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datarevisio !== null && $tmpDt = new DateTime($this->datarevisio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datarevisio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MaterialPeer::DATAREVISIO;
			}
		} // if either are not null

		return $this;
	} // setDatarevisio()

	/**
	 * Set the value of [cedit] column.
	 * 
	 * @param      string $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setCedit($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cedit !== $v) {
			$this->cedit = $v;
			$this->modifiedColumns[] = MaterialPeer::CEDIT;
		}

		return $this;
	} // setCedit()

	/**
	 * Sets the value of [datacessio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Material The current object (for fluent API support)
	 */
	public function setDatacessio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datacessio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datacessio !== null && $tmpDt = new DateTime($this->datacessio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datacessio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MaterialPeer::DATACESSIO;
			}
		} // if either are not null

		return $this;
	} // setDatacessio()

	/**
	 * Sets the value of [dataretorn] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Material The current object (for fluent API support)
	 */
	public function setDataretorn($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dataretorn !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dataretorn !== null && $tmpDt = new DateTime($this->dataretorn)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dataretorn = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MaterialPeer::DATARETORN;
			}
		} // if either are not null

		return $this;
	} // setDataretorn()

	/**
	 * Set the value of [numfactura] column.
	 * 
	 * @param      string $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setNumfactura($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->numfactura !== $v) {
			$this->numfactura = $v;
			$this->modifiedColumns[] = MaterialPeer::NUMFACTURA;
		}

		return $this;
	} // setNumfactura()

	/**
	 * Set the value of [preu] column.
	 * 
	 * @param      double $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setPreu($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->preu !== $v) {
			$this->preu = $v;
			$this->modifiedColumns[] = MaterialPeer::PREU;
		}

		return $this;
	} // setPreu()

	/**
	 * Set the value of [notesmanteniment] column.
	 * 
	 * @param      string $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setNotesmanteniment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->notesmanteniment !== $v) {
			$this->notesmanteniment = $v;
			$this->modifiedColumns[] = MaterialPeer::NOTESMANTENIMENT;
		}

		return $this;
	} // setNotesmanteniment()

	/**
	 * Sets the value of [databaixa] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Material The current object (for fluent API support)
	 */
	public function setDatabaixa($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->databaixa !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->databaixa !== null && $tmpDt = new DateTime($this->databaixa)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->databaixa = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MaterialPeer::DATABAIXA;
			}
		} // if either are not null

		return $this;
	} // setDatabaixa()

	/**
	 * Sets the value of [datareparacio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Material The current object (for fluent API support)
	 */
	public function setDatareparacio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->datareparacio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->datareparacio !== null && $tmpDt = new DateTime($this->datareparacio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->datareparacio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MaterialPeer::DATAREPARACIO;
			}
		} // if either are not null

		return $this;
	} // setDatareparacio()

	/**
	 * Set the value of [disponible] column.
	 * 
	 * @param      int $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setDisponible($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->disponible !== $v || $this->isNew()) {
			$this->disponible = $v;
			$this->modifiedColumns[] = MaterialPeer::DISPONIBLE;
		}

		return $this;
	} // setDisponible()

	/**
	 * Sets the value of [altaregistre] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Material The current object (for fluent API support)
	 */
	public function setAltaregistre($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->altaregistre !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->altaregistre !== null && $tmpDt = new DateTime($this->altaregistre)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->altaregistre = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MaterialPeer::ALTAREGISTRE;
			}
		} // if either are not null

		return $this;
	} // setAltaregistre()

	/**
	 * Set the value of [istransferible] column.
	 * 
	 * @param      int $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setIstransferible($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->istransferible !== $v) {
			$this->istransferible = $v;
			$this->modifiedColumns[] = MaterialPeer::ISTRANSFERIBLE;
		}

		return $this;
	} // setIstransferible()

	/**
	 * Set the value of [isadministratiu] column.
	 * 
	 * @param      int $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setIsadministratiu($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->isadministratiu !== $v) {
			$this->isadministratiu = $v;
			$this->modifiedColumns[] = MaterialPeer::ISADMINISTRATIU;
		}

		return $this;
	} // setIsadministratiu()

	/**
	 * Set the value of [site_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setSiteId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->site_id !== $v) {
			$this->site_id = $v;
			$this->modifiedColumns[] = MaterialPeer::SITE_ID;
		}

		return $this;
	} // setSiteId()

	/**
	 * Set the value of [actiu] column.
	 * 
	 * @param      int $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setActiu($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->actiu !== $v || $this->isNew()) {
			$this->actiu = $v;
			$this->modifiedColumns[] = MaterialPeer::ACTIU;
		}

		return $this;
	} // setActiu()

	/**
	 * Set the value of [unitats] column.
	 * 
	 * @param      int $v new value
	 * @return     Material The current object (for fluent API support)
	 */
	public function setUnitats($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->unitats !== $v || $this->isNew()) {
			$this->unitats = $v;
			$this->modifiedColumns[] = MaterialPeer::UNITATS;
		}

		return $this;
	} // setUnitats()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->disponible !== 1) {
				return false;
			}

			if ($this->actiu !== 1) {
				return false;
			}

			if ($this->unitats !== 1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->idmaterial = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->materialgeneric_idmaterialgeneric = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->nom = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->descripcio = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->responsable = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->ubicacio = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->datacompra = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->identificador = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->numserie = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->datagarantia = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->datarevisio = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->cedit = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->datacessio = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->dataretorn = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->numfactura = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->preu = ($row[$startcol + 15] !== null) ? (double) $row[$startcol + 15] : null;
			$this->notesmanteniment = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->databaixa = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->datareparacio = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->disponible = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->altaregistre = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->istransferible = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->isadministratiu = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->site_id = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->actiu = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->unitats = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 26; // 26 = MaterialPeer::NUM_COLUMNS - MaterialPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Material object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aMaterialgeneric !== null && $this->materialgeneric_idmaterialgeneric !== $this->aMaterialgeneric->getIdmaterialgeneric()) {
			$this->aMaterialgeneric = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MaterialPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = MaterialPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aMaterialgeneric = null;
			$this->collCessiomaterials = null;
			$this->lastCessiomaterialCriteria = null;

			$this->collHorarisespaiss = null;
			$this->lastHorarisespaisCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MaterialPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseMaterial:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				MaterialPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseMaterial:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MaterialPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseMaterial:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseMaterial:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				MaterialPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMaterialgeneric !== null) {
				if ($this->aMaterialgeneric->isModified() || $this->aMaterialgeneric->isNew()) {
					$affectedRows += $this->aMaterialgeneric->save($con);
				}
				$this->setMaterialgeneric($this->aMaterialgeneric);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = MaterialPeer::IDMATERIAL;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = MaterialPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setIdmaterial($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += MaterialPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCessiomaterials !== null) {
				foreach ($this->collCessiomaterials as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collHorarisespaiss !== null) {
				foreach ($this->collHorarisespaiss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMaterialgeneric !== null) {
				if (!$this->aMaterialgeneric->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMaterialgeneric->getValidationFailures());
				}
			}


			if (($retval = MaterialPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCessiomaterials !== null) {
					foreach ($this->collCessiomaterials as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collHorarisespaiss !== null) {
					foreach ($this->collHorarisespaiss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MaterialPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdmaterial();
				break;
			case 1:
				return $this->getMaterialgenericIdmaterialgeneric();
				break;
			case 2:
				return $this->getNom();
				break;
			case 3:
				return $this->getDescripcio();
				break;
			case 4:
				return $this->getResponsable();
				break;
			case 5:
				return $this->getUbicacio();
				break;
			case 6:
				return $this->getDatacompra();
				break;
			case 7:
				return $this->getIdentificador();
				break;
			case 8:
				return $this->getNumserie();
				break;
			case 9:
				return $this->getDatagarantia();
				break;
			case 10:
				return $this->getDatarevisio();
				break;
			case 11:
				return $this->getCedit();
				break;
			case 12:
				return $this->getDatacessio();
				break;
			case 13:
				return $this->getDataretorn();
				break;
			case 14:
				return $this->getNumfactura();
				break;
			case 15:
				return $this->getPreu();
				break;
			case 16:
				return $this->getNotesmanteniment();
				break;
			case 17:
				return $this->getDatabaixa();
				break;
			case 18:
				return $this->getDatareparacio();
				break;
			case 19:
				return $this->getDisponible();
				break;
			case 20:
				return $this->getAltaregistre();
				break;
			case 21:
				return $this->getIstransferible();
				break;
			case 22:
				return $this->getIsadministratiu();
				break;
			case 23:
				return $this->getSiteId();
				break;
			case 24:
				return $this->getActiu();
				break;
			case 25:
				return $this->getUnitats();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = MaterialPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIdmaterial(),
			$keys[1] => $this->getMaterialgenericIdmaterialgeneric(),
			$keys[2] => $this->getNom(),
			$keys[3] => $this->getDescripcio(),
			$keys[4] => $this->getResponsable(),
			$keys[5] => $this->getUbicacio(),
			$keys[6] => $this->getDatacompra(),
			$keys[7] => $this->getIdentificador(),
			$keys[8] => $this->getNumserie(),
			$keys[9] => $this->getDatagarantia(),
			$keys[10] => $this->getDatarevisio(),
			$keys[11] => $this->getCedit(),
			$keys[12] => $this->getDatacessio(),
			$keys[13] => $this->getDataretorn(),
			$keys[14] => $this->getNumfactura(),
			$keys[15] => $this->getPreu(),
			$keys[16] => $this->getNotesmanteniment(),
			$keys[17] => $this->getDatabaixa(),
			$keys[18] => $this->getDatareparacio(),
			$keys[19] => $this->getDisponible(),
			$keys[20] => $this->getAltaregistre(),
			$keys[21] => $this->getIstransferible(),
			$keys[22] => $this->getIsadministratiu(),
			$keys[23] => $this->getSiteId(),
			$keys[24] => $this->getActiu(),
			$keys[25] => $this->getUnitats(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MaterialPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdmaterial($value);
				break;
			case 1:
				$this->setMaterialgenericIdmaterialgeneric($value);
				break;
			case 2:
				$this->setNom($value);
				break;
			case 3:
				$this->setDescripcio($value);
				break;
			case 4:
				$this->setResponsable($value);
				break;
			case 5:
				$this->setUbicacio($value);
				break;
			case 6:
				$this->setDatacompra($value);
				break;
			case 7:
				$this->setIdentificador($value);
				break;
			case 8:
				$this->setNumserie($value);
				break;
			case 9:
				$this->setDatagarantia($value);
				break;
			case 10:
				$this->setDatarevisio($value);
				break;
			case 11:
				$this->setCedit($value);
				break;
			case 12:
				$this->setDatacessio($value);
				break;
			case 13:
				$this->setDataretorn($value);
				break;
			case 14:
				$this->setNumfactura($value);
				break;
			case 15:
				$this->setPreu($value);
				break;
			case 16:
				$this->setNotesmanteniment($value);
				break;
			case 17:
				$this->setDatabaixa($value);
				break;
			case 18:
				$this->setDatareparacio($value);
				break;
			case 19:
				$this->setDisponible($value);
				break;
			case 20:
				$this->setAltaregistre($value);
				break;
			case 21:
				$this->setIstransferible($value);
				break;
			case 22:
				$this->setIsadministratiu($value);
				break;
			case 23:
				$this->setSiteId($value);
				break;
			case 24:
				$this->setActiu($value);
				break;
			case 25:
				$this->setUnitats($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = MaterialPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdmaterial($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setMaterialgenericIdmaterialgeneric($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setNom($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setDescripcio($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setResponsable($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setUbicacio($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDatacompra($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIdentificador($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setNumserie($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setDatagarantia($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setDatarevisio($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCedit($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setDatacessio($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDataretorn($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setNumfactura($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setPreu($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setNotesmanteniment($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setDatabaixa($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setDatareparacio($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setDisponible($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setAltaregistre($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setIstransferible($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setIsadministratiu($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setSiteId($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setActiu($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setUnitats($arr[$keys[25]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(MaterialPeer::DATABASE_NAME);

		if ($this->isColumnModified(MaterialPeer::IDMATERIAL)) $criteria->add(MaterialPeer::IDMATERIAL, $this->idmaterial);
		if ($this->isColumnModified(MaterialPeer::MATERIALGENERIC_IDMATERIALGENERIC)) $criteria->add(MaterialPeer::MATERIALGENERIC_IDMATERIALGENERIC, $this->materialgeneric_idmaterialgeneric);
		if ($this->isColumnModified(MaterialPeer::NOM)) $criteria->add(MaterialPeer::NOM, $this->nom);
		if ($this->isColumnModified(MaterialPeer::DESCRIPCIO)) $criteria->add(MaterialPeer::DESCRIPCIO, $this->descripcio);
		if ($this->isColumnModified(MaterialPeer::RESPONSABLE)) $criteria->add(MaterialPeer::RESPONSABLE, $this->responsable);
		if ($this->isColumnModified(MaterialPeer::UBICACIO)) $criteria->add(MaterialPeer::UBICACIO, $this->ubicacio);
		if ($this->isColumnModified(MaterialPeer::DATACOMPRA)) $criteria->add(MaterialPeer::DATACOMPRA, $this->datacompra);
		if ($this->isColumnModified(MaterialPeer::IDENTIFICADOR)) $criteria->add(MaterialPeer::IDENTIFICADOR, $this->identificador);
		if ($this->isColumnModified(MaterialPeer::NUMSERIE)) $criteria->add(MaterialPeer::NUMSERIE, $this->numserie);
		if ($this->isColumnModified(MaterialPeer::DATAGARANTIA)) $criteria->add(MaterialPeer::DATAGARANTIA, $this->datagarantia);
		if ($this->isColumnModified(MaterialPeer::DATAREVISIO)) $criteria->add(MaterialPeer::DATAREVISIO, $this->datarevisio);
		if ($this->isColumnModified(MaterialPeer::CEDIT)) $criteria->add(MaterialPeer::CEDIT, $this->cedit);
		if ($this->isColumnModified(MaterialPeer::DATACESSIO)) $criteria->add(MaterialPeer::DATACESSIO, $this->datacessio);
		if ($this->isColumnModified(MaterialPeer::DATARETORN)) $criteria->add(MaterialPeer::DATARETORN, $this->dataretorn);
		if ($this->isColumnModified(MaterialPeer::NUMFACTURA)) $criteria->add(MaterialPeer::NUMFACTURA, $this->numfactura);
		if ($this->isColumnModified(MaterialPeer::PREU)) $criteria->add(MaterialPeer::PREU, $this->preu);
		if ($this->isColumnModified(MaterialPeer::NOTESMANTENIMENT)) $criteria->add(MaterialPeer::NOTESMANTENIMENT, $this->notesmanteniment);
		if ($this->isColumnModified(MaterialPeer::DATABAIXA)) $criteria->add(MaterialPeer::DATABAIXA, $this->databaixa);
		if ($this->isColumnModified(MaterialPeer::DATAREPARACIO)) $criteria->add(MaterialPeer::DATAREPARACIO, $this->datareparacio);
		if ($this->isColumnModified(MaterialPeer::DISPONIBLE)) $criteria->add(MaterialPeer::DISPONIBLE, $this->disponible);
		if ($this->isColumnModified(MaterialPeer::ALTAREGISTRE)) $criteria->add(MaterialPeer::ALTAREGISTRE, $this->altaregistre);
		if ($this->isColumnModified(MaterialPeer::ISTRANSFERIBLE)) $criteria->add(MaterialPeer::ISTRANSFERIBLE, $this->istransferible);
		if ($this->isColumnModified(MaterialPeer::ISADMINISTRATIU)) $criteria->add(MaterialPeer::ISADMINISTRATIU, $this->isadministratiu);
		if ($this->isColumnModified(MaterialPeer::SITE_ID)) $criteria->add(MaterialPeer::SITE_ID, $this->site_id);
		if ($this->isColumnModified(MaterialPeer::ACTIU)) $criteria->add(MaterialPeer::ACTIU, $this->actiu);
		if ($this->isColumnModified(MaterialPeer::UNITATS)) $criteria->add(MaterialPeer::UNITATS, $this->unitats);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(MaterialPeer::DATABASE_NAME);

		$criteria->add(MaterialPeer::IDMATERIAL, $this->idmaterial);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdmaterial();
	}

	/**
	 * Generic method to set the primary key (idmaterial column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdmaterial($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Material (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setMaterialgenericIdmaterialgeneric($this->materialgeneric_idmaterialgeneric);

		$copyObj->setNom($this->nom);

		$copyObj->setDescripcio($this->descripcio);

		$copyObj->setResponsable($this->responsable);

		$copyObj->setUbicacio($this->ubicacio);

		$copyObj->setDatacompra($this->datacompra);

		$copyObj->setIdentificador($this->identificador);

		$copyObj->setNumserie($this->numserie);

		$copyObj->setDatagarantia($this->datagarantia);

		$copyObj->setDatarevisio($this->datarevisio);

		$copyObj->setCedit($this->cedit);

		$copyObj->setDatacessio($this->datacessio);

		$copyObj->setDataretorn($this->dataretorn);

		$copyObj->setNumfactura($this->numfactura);

		$copyObj->setPreu($this->preu);

		$copyObj->setNotesmanteniment($this->notesmanteniment);

		$copyObj->setDatabaixa($this->databaixa);

		$copyObj->setDatareparacio($this->datareparacio);

		$copyObj->setDisponible($this->disponible);

		$copyObj->setAltaregistre($this->altaregistre);

		$copyObj->setIstransferible($this->istransferible);

		$copyObj->setIsadministratiu($this->isadministratiu);

		$copyObj->setSiteId($this->site_id);

		$copyObj->setActiu($this->actiu);

		$copyObj->setUnitats($this->unitats);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCessiomaterials() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCessiomaterial($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getHorarisespaiss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addHorarisespais($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setIdmaterial(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Material Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     MaterialPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new MaterialPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Materialgeneric object.
	 *
	 * @param      Materialgeneric $v
	 * @return     Material The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMaterialgeneric(Materialgeneric $v = null)
	{
		if ($v === null) {
			$this->setMaterialgenericIdmaterialgeneric(NULL);
		} else {
			$this->setMaterialgenericIdmaterialgeneric($v->getIdmaterialgeneric());
		}

		$this->aMaterialgeneric = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Materialgeneric object, it will not be re-added.
		if ($v !== null) {
			$v->addMaterial($this);
		}

		return $this;
	}


	/**
	 * Get the associated Materialgeneric object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Materialgeneric The associated Materialgeneric object.
	 * @throws     PropelException
	 */
	public function getMaterialgeneric(PropelPDO $con = null)
	{
		if ($this->aMaterialgeneric === null && ($this->materialgeneric_idmaterialgeneric !== null)) {
			$this->aMaterialgeneric = MaterialgenericPeer::retrieveByPk($this->materialgeneric_idmaterialgeneric);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMaterialgeneric->addMaterials($this);
			 */
		}
		return $this->aMaterialgeneric;
	}

	/**
	 * Clears out the collCessiomaterials collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCessiomaterials()
	 */
	public function clearCessiomaterials()
	{
		$this->collCessiomaterials = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCessiomaterials collection (array).
	 *
	 * By default this just sets the collCessiomaterials collection to an empty array (like clearcollCessiomaterials());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCessiomaterials()
	{
		$this->collCessiomaterials = array();
	}

	/**
	 * Gets an array of Cessiomaterial objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Material has previously been saved, it will retrieve
	 * related Cessiomaterials from storage. If this Material is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Cessiomaterial[]
	 * @throws     PropelException
	 */
	public function getCessiomaterials($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MaterialPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCessiomaterials === null) {
			if ($this->isNew()) {
			   $this->collCessiomaterials = array();
			} else {

				$criteria->add(CessiomaterialPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

				CessiomaterialPeer::addSelectColumns($criteria);
				$this->collCessiomaterials = CessiomaterialPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CessiomaterialPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

				CessiomaterialPeer::addSelectColumns($criteria);
				if (!isset($this->lastCessiomaterialCriteria) || !$this->lastCessiomaterialCriteria->equals($criteria)) {
					$this->collCessiomaterials = CessiomaterialPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCessiomaterialCriteria = $criteria;
		return $this->collCessiomaterials;
	}

	/**
	 * Returns the number of related Cessiomaterial objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Cessiomaterial objects.
	 * @throws     PropelException
	 */
	public function countCessiomaterials(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MaterialPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCessiomaterials === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CessiomaterialPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

				$count = CessiomaterialPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CessiomaterialPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

				if (!isset($this->lastCessiomaterialCriteria) || !$this->lastCessiomaterialCriteria->equals($criteria)) {
					$count = CessiomaterialPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCessiomaterials);
				}
			} else {
				$count = count($this->collCessiomaterials);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Cessiomaterial object to this object
	 * through the Cessiomaterial foreign key attribute.
	 *
	 * @param      Cessiomaterial $l Cessiomaterial
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCessiomaterial(Cessiomaterial $l)
	{
		if ($this->collCessiomaterials === null) {
			$this->initCessiomaterials();
		}
		if (!in_array($l, $this->collCessiomaterials, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCessiomaterials, $l);
			$l->setMaterial($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Material is new, it will return
	 * an empty collection; or if this Material has previously
	 * been saved, it will retrieve related Cessiomaterials from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Material.
	 */
	public function getCessiomaterialsJoinCessio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MaterialPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCessiomaterials === null) {
			if ($this->isNew()) {
				$this->collCessiomaterials = array();
			} else {

				$criteria->add(CessiomaterialPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

				$this->collCessiomaterials = CessiomaterialPeer::doSelectJoinCessio($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CessiomaterialPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

			if (!isset($this->lastCessiomaterialCriteria) || !$this->lastCessiomaterialCriteria->equals($criteria)) {
				$this->collCessiomaterials = CessiomaterialPeer::doSelectJoinCessio($criteria, $con, $join_behavior);
			}
		}
		$this->lastCessiomaterialCriteria = $criteria;

		return $this->collCessiomaterials;
	}

	/**
	 * Clears out the collHorarisespaiss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addHorarisespaiss()
	 */
	public function clearHorarisespaiss()
	{
		$this->collHorarisespaiss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collHorarisespaiss collection (array).
	 *
	 * By default this just sets the collHorarisespaiss collection to an empty array (like clearcollHorarisespaiss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initHorarisespaiss()
	{
		$this->collHorarisespaiss = array();
	}

	/**
	 * Gets an array of Horarisespais objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Material has previously been saved, it will retrieve
	 * related Horarisespaiss from storage. If this Material is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Horarisespais[]
	 * @throws     PropelException
	 */
	public function getHorarisespaiss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MaterialPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHorarisespaiss === null) {
			if ($this->isNew()) {
			   $this->collHorarisespaiss = array();
			} else {

				$criteria->add(HorarisespaisPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

				HorarisespaisPeer::addSelectColumns($criteria);
				$this->collHorarisespaiss = HorarisespaisPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(HorarisespaisPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

				HorarisespaisPeer::addSelectColumns($criteria);
				if (!isset($this->lastHorarisespaisCriteria) || !$this->lastHorarisespaisCriteria->equals($criteria)) {
					$this->collHorarisespaiss = HorarisespaisPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastHorarisespaisCriteria = $criteria;
		return $this->collHorarisespaiss;
	}

	/**
	 * Returns the number of related Horarisespais objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Horarisespais objects.
	 * @throws     PropelException
	 */
	public function countHorarisespaiss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MaterialPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collHorarisespaiss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(HorarisespaisPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

				$count = HorarisespaisPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(HorarisespaisPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

				if (!isset($this->lastHorarisespaisCriteria) || !$this->lastHorarisespaisCriteria->equals($criteria)) {
					$count = HorarisespaisPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collHorarisespaiss);
				}
			} else {
				$count = count($this->collHorarisespaiss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Horarisespais object to this object
	 * through the Horarisespais foreign key attribute.
	 *
	 * @param      Horarisespais $l Horarisespais
	 * @return     void
	 * @throws     PropelException
	 */
	public function addHorarisespais(Horarisespais $l)
	{
		if ($this->collHorarisespaiss === null) {
			$this->initHorarisespaiss();
		}
		if (!in_array($l, $this->collHorarisespaiss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collHorarisespaiss, $l);
			$l->setMaterial($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Material is new, it will return
	 * an empty collection; or if this Material has previously
	 * been saved, it will retrieve related Horarisespaiss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Material.
	 */
	public function getHorarisespaissJoinEspais($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MaterialPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHorarisespaiss === null) {
			if ($this->isNew()) {
				$this->collHorarisespaiss = array();
			} else {

				$criteria->add(HorarisespaisPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

				$this->collHorarisespaiss = HorarisespaisPeer::doSelectJoinEspais($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(HorarisespaisPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

			if (!isset($this->lastHorarisespaisCriteria) || !$this->lastHorarisespaisCriteria->equals($criteria)) {
				$this->collHorarisespaiss = HorarisespaisPeer::doSelectJoinEspais($criteria, $con, $join_behavior);
			}
		}
		$this->lastHorarisespaisCriteria = $criteria;

		return $this->collHorarisespaiss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Material is new, it will return
	 * an empty collection; or if this Material has previously
	 * been saved, it will retrieve related Horarisespaiss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Material.
	 */
	public function getHorarisespaissJoinEspaisExterns($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MaterialPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHorarisespaiss === null) {
			if ($this->isNew()) {
				$this->collHorarisespaiss = array();
			} else {

				$criteria->add(HorarisespaisPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

				$this->collHorarisespaiss = HorarisespaisPeer::doSelectJoinEspaisExterns($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(HorarisespaisPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

			if (!isset($this->lastHorarisespaisCriteria) || !$this->lastHorarisespaisCriteria->equals($criteria)) {
				$this->collHorarisespaiss = HorarisespaisPeer::doSelectJoinEspaisExterns($criteria, $con, $join_behavior);
			}
		}
		$this->lastHorarisespaisCriteria = $criteria;

		return $this->collHorarisespaiss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Material is new, it will return
	 * an empty collection; or if this Material has previously
	 * been saved, it will retrieve related Horarisespaiss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Material.
	 */
	public function getHorarisespaissJoinHoraris($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MaterialPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHorarisespaiss === null) {
			if ($this->isNew()) {
				$this->collHorarisespaiss = array();
			} else {

				$criteria->add(HorarisespaisPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

				$this->collHorarisespaiss = HorarisespaisPeer::doSelectJoinHoraris($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(HorarisespaisPeer::MATERIAL_IDMATERIAL, $this->idmaterial);

			if (!isset($this->lastHorarisespaisCriteria) || !$this->lastHorarisespaisCriteria->equals($criteria)) {
				$this->collHorarisespaiss = HorarisespaisPeer::doSelectJoinHoraris($criteria, $con, $join_behavior);
			}
		}
		$this->lastHorarisespaisCriteria = $criteria;

		return $this->collHorarisespaiss;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCessiomaterials) {
				foreach ((array) $this->collCessiomaterials as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collHorarisespaiss) {
				foreach ((array) $this->collHorarisespaiss as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCessiomaterials = null;
		$this->collHorarisespaiss = null;
			$this->aMaterialgeneric = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseMaterial:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseMaterial::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseMaterial
