<?php

/**
 * Base class that represents a row from the 'cessio' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/08/11 10:10:16
 *
 * @package    lib.model.om
 */
abstract class BaseCessio extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CessioPeer
	 */
	protected static $peer;

	/**
	 * The value for the cessio_id field.
	 * @var        int
	 */
	protected $cessio_id;

	/**
	 * The value for the actiu field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $actiu;

	/**
	 * The value for the site_id field.
	 * @var        int
	 */
	protected $site_id;

	/**
	 * The value for the usuari_id field.
	 * @var        int
	 */
	protected $usuari_id;

	/**
	 * The value for the nom field.
	 * @var        string
	 */
	protected $nom;

	/**
	 * The value for the dni field.
	 * @var        string
	 */
	protected $dni;

	/**
	 * The value for the representant field.
	 * @var        string
	 */
	protected $representant;

	/**
	 * The value for the motiu field.
	 * @var        string
	 */
	protected $motiu;

	/**
	 * The value for the condicions field.
	 * @var        string
	 */
	protected $condicions;

	/**
	 * The value for the material_no_inventariat field.
	 * @var        string
	 */
	protected $material_no_inventariat;

	/**
	 * The value for the data_cessio field.
	 * @var        string
	 */
	protected $data_cessio;

	/**
	 * The value for the data_retorn field.
	 * @var        string
	 */
	protected $data_retorn;

	/**
	 * The value for the estat field.
	 * @var        string
	 */
	protected $estat;

	/**
	 * The value for the retornat field.
	 * @var        int
	 */
	protected $retornat;

	/**
	 * The value for the estat_retornat field.
	 * @var        string
	 */
	protected $estat_retornat;

	/**
	 * The value for the data_retornat field.
	 * @var        string
	 */
	protected $data_retornat;

	/**
	 * @var        Usuaris
	 */
	protected $aUsuaris;

	/**
	 * @var        array Cessiomaterial[] Collection to store aggregation of Cessiomaterial objects.
	 */
	protected $collCessiomaterials;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCessiomaterials.
	 */
	private $lastCessiomaterialCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'CessioPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->actiu = 1;
	}

	/**
	 * Initializes internal state of BaseCessio object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [cessio_id] column value.
	 * 
	 * @return     int
	 */
	public function getCessioId()
	{
		return $this->cessio_id;
	}

	/**
	 * Get the [actiu] column value.
	 * 
	 * @return     int
	 */
	public function getActiu()
	{
		return $this->actiu;
	}

	/**
	 * Get the [site_id] column value.
	 * 
	 * @return     int
	 */
	public function getSiteId()
	{
		return $this->site_id;
	}

	/**
	 * Get the [usuari_id] column value.
	 * 
	 * @return     int
	 */
	public function getUsuariId()
	{
		return $this->usuari_id;
	}

	/**
	 * Get the [nom] column value.
	 * 
	 * @return     string
	 */
	public function getNom()
	{
		return $this->nom;
	}

	/**
	 * Get the [dni] column value.
	 * 
	 * @return     string
	 */
	public function getDni()
	{
		return $this->dni;
	}

	/**
	 * Get the [representant] column value.
	 * 
	 * @return     string
	 */
	public function getRepresentant()
	{
		return $this->representant;
	}

	/**
	 * Get the [motiu] column value.
	 * 
	 * @return     string
	 */
	public function getMotiu()
	{
		return $this->motiu;
	}

	/**
	 * Get the [condicions] column value.
	 * 
	 * @return     string
	 */
	public function getCondicions()
	{
		return $this->condicions;
	}

	/**
	 * Get the [material_no_inventariat] column value.
	 * 
	 * @return     string
	 */
	public function getMaterialNoInventariat()
	{
		return $this->material_no_inventariat;
	}

	/**
	 * Get the [optionally formatted] temporal [data_cessio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataCessio($format = 'Y-m-d')
	{
		if ($this->data_cessio === null) {
			return null;
		}


		if ($this->data_cessio === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->data_cessio);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->data_cessio, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [data_retorn] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataRetorn($format = 'Y-m-d')
	{
		if ($this->data_retorn === null) {
			return null;
		}


		if ($this->data_retorn === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->data_retorn);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->data_retorn, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [estat] column value.
	 * 
	 * @return     string
	 */
	public function getEstat()
	{
		return $this->estat;
	}

	/**
	 * Get the [retornat] column value.
	 * 
	 * @return     int
	 */
	public function getRetornat()
	{
		return $this->retornat;
	}

	/**
	 * Get the [estat_retornat] column value.
	 * 
	 * @return     string
	 */
	public function getEstatRetornat()
	{
		return $this->estat_retornat;
	}

	/**
	 * Get the [optionally formatted] temporal [data_retornat] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDataRetornat($format = 'Y-m-d')
	{
		if ($this->data_retornat === null) {
			return null;
		}


		if ($this->data_retornat === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->data_retornat);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->data_retornat, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [cessio_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setCessioId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cessio_id !== $v) {
			$this->cessio_id = $v;
			$this->modifiedColumns[] = CessioPeer::CESSIO_ID;
		}

		return $this;
	} // setCessioId()

	/**
	 * Set the value of [actiu] column.
	 * 
	 * @param      int $v new value
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setActiu($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->actiu !== $v || $this->isNew()) {
			$this->actiu = $v;
			$this->modifiedColumns[] = CessioPeer::ACTIU;
		}

		return $this;
	} // setActiu()

	/**
	 * Set the value of [site_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setSiteId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->site_id !== $v) {
			$this->site_id = $v;
			$this->modifiedColumns[] = CessioPeer::SITE_ID;
		}

		return $this;
	} // setSiteId()

	/**
	 * Set the value of [usuari_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setUsuariId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usuari_id !== $v) {
			$this->usuari_id = $v;
			$this->modifiedColumns[] = CessioPeer::USUARI_ID;
		}

		if ($this->aUsuaris !== null && $this->aUsuaris->getUsuariid() !== $v) {
			$this->aUsuaris = null;
		}

		return $this;
	} // setUsuariId()

	/**
	 * Set the value of [nom] column.
	 * 
	 * @param      string $v new value
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setNom($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nom !== $v) {
			$this->nom = $v;
			$this->modifiedColumns[] = CessioPeer::NOM;
		}

		return $this;
	} // setNom()

	/**
	 * Set the value of [dni] column.
	 * 
	 * @param      string $v new value
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setDni($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dni !== $v) {
			$this->dni = $v;
			$this->modifiedColumns[] = CessioPeer::DNI;
		}

		return $this;
	} // setDni()

	/**
	 * Set the value of [representant] column.
	 * 
	 * @param      string $v new value
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setRepresentant($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->representant !== $v) {
			$this->representant = $v;
			$this->modifiedColumns[] = CessioPeer::REPRESENTANT;
		}

		return $this;
	} // setRepresentant()

	/**
	 * Set the value of [motiu] column.
	 * 
	 * @param      string $v new value
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setMotiu($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->motiu !== $v) {
			$this->motiu = $v;
			$this->modifiedColumns[] = CessioPeer::MOTIU;
		}

		return $this;
	} // setMotiu()

	/**
	 * Set the value of [condicions] column.
	 * 
	 * @param      string $v new value
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setCondicions($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->condicions !== $v) {
			$this->condicions = $v;
			$this->modifiedColumns[] = CessioPeer::CONDICIONS;
		}

		return $this;
	} // setCondicions()

	/**
	 * Set the value of [material_no_inventariat] column.
	 * 
	 * @param      string $v new value
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setMaterialNoInventariat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->material_no_inventariat !== $v) {
			$this->material_no_inventariat = $v;
			$this->modifiedColumns[] = CessioPeer::MATERIAL_NO_INVENTARIAT;
		}

		return $this;
	} // setMaterialNoInventariat()

	/**
	 * Sets the value of [data_cessio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setDataCessio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->data_cessio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->data_cessio !== null && $tmpDt = new DateTime($this->data_cessio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->data_cessio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CessioPeer::DATA_CESSIO;
			}
		} // if either are not null

		return $this;
	} // setDataCessio()

	/**
	 * Sets the value of [data_retorn] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setDataRetorn($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->data_retorn !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->data_retorn !== null && $tmpDt = new DateTime($this->data_retorn)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->data_retorn = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CessioPeer::DATA_RETORN;
			}
		} // if either are not null

		return $this;
	} // setDataRetorn()

	/**
	 * Set the value of [estat] column.
	 * 
	 * @param      string $v new value
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setEstat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->estat !== $v) {
			$this->estat = $v;
			$this->modifiedColumns[] = CessioPeer::ESTAT;
		}

		return $this;
	} // setEstat()

	/**
	 * Set the value of [retornat] column.
	 * 
	 * @param      int $v new value
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setRetornat($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->retornat !== $v) {
			$this->retornat = $v;
			$this->modifiedColumns[] = CessioPeer::RETORNAT;
		}

		return $this;
	} // setRetornat()

	/**
	 * Set the value of [estat_retornat] column.
	 * 
	 * @param      string $v new value
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setEstatRetornat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->estat_retornat !== $v) {
			$this->estat_retornat = $v;
			$this->modifiedColumns[] = CessioPeer::ESTAT_RETORNAT;
		}

		return $this;
	} // setEstatRetornat()

	/**
	 * Sets the value of [data_retornat] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Cessio The current object (for fluent API support)
	 */
	public function setDataRetornat($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->data_retornat !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->data_retornat !== null && $tmpDt = new DateTime($this->data_retornat)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->data_retornat = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CessioPeer::DATA_RETORNAT;
			}
		} // if either are not null

		return $this;
	} // setDataRetornat()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->actiu !== 1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cessio_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->actiu = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->site_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->usuari_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->nom = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->dni = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->representant = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->motiu = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->condicions = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->material_no_inventariat = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->data_cessio = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->data_retorn = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->estat = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->retornat = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->estat_retornat = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->data_retornat = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 16; // 16 = CessioPeer::NUM_COLUMNS - CessioPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Cessio object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aUsuaris !== null && $this->usuari_id !== $this->aUsuaris->getUsuariid()) {
			$this->aUsuaris = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CessioPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CessioPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aUsuaris = null;
			$this->collCessiomaterials = null;
			$this->lastCessiomaterialCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CessioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCessio:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				CessioPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCessio:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CessioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCessio:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCessio:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				CessioPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUsuaris !== null) {
				if ($this->aUsuaris->isModified() || $this->aUsuaris->isNew()) {
					$affectedRows += $this->aUsuaris->save($con);
				}
				$this->setUsuaris($this->aUsuaris);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CessioPeer::CESSIO_ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CessioPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setCessioId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CessioPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCessiomaterials !== null) {
				foreach ($this->collCessiomaterials as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUsuaris !== null) {
				if (!$this->aUsuaris->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsuaris->getValidationFailures());
				}
			}


			if (($retval = CessioPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCessiomaterials !== null) {
					foreach ($this->collCessiomaterials as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CessioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCessioId();
				break;
			case 1:
				return $this->getActiu();
				break;
			case 2:
				return $this->getSiteId();
				break;
			case 3:
				return $this->getUsuariId();
				break;
			case 4:
				return $this->getNom();
				break;
			case 5:
				return $this->getDni();
				break;
			case 6:
				return $this->getRepresentant();
				break;
			case 7:
				return $this->getMotiu();
				break;
			case 8:
				return $this->getCondicions();
				break;
			case 9:
				return $this->getMaterialNoInventariat();
				break;
			case 10:
				return $this->getDataCessio();
				break;
			case 11:
				return $this->getDataRetorn();
				break;
			case 12:
				return $this->getEstat();
				break;
			case 13:
				return $this->getRetornat();
				break;
			case 14:
				return $this->getEstatRetornat();
				break;
			case 15:
				return $this->getDataRetornat();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CessioPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCessioId(),
			$keys[1] => $this->getActiu(),
			$keys[2] => $this->getSiteId(),
			$keys[3] => $this->getUsuariId(),
			$keys[4] => $this->getNom(),
			$keys[5] => $this->getDni(),
			$keys[6] => $this->getRepresentant(),
			$keys[7] => $this->getMotiu(),
			$keys[8] => $this->getCondicions(),
			$keys[9] => $this->getMaterialNoInventariat(),
			$keys[10] => $this->getDataCessio(),
			$keys[11] => $this->getDataRetorn(),
			$keys[12] => $this->getEstat(),
			$keys[13] => $this->getRetornat(),
			$keys[14] => $this->getEstatRetornat(),
			$keys[15] => $this->getDataRetornat(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CessioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCessioId($value);
				break;
			case 1:
				$this->setActiu($value);
				break;
			case 2:
				$this->setSiteId($value);
				break;
			case 3:
				$this->setUsuariId($value);
				break;
			case 4:
				$this->setNom($value);
				break;
			case 5:
				$this->setDni($value);
				break;
			case 6:
				$this->setRepresentant($value);
				break;
			case 7:
				$this->setMotiu($value);
				break;
			case 8:
				$this->setCondicions($value);
				break;
			case 9:
				$this->setMaterialNoInventariat($value);
				break;
			case 10:
				$this->setDataCessio($value);
				break;
			case 11:
				$this->setDataRetorn($value);
				break;
			case 12:
				$this->setEstat($value);
				break;
			case 13:
				$this->setRetornat($value);
				break;
			case 14:
				$this->setEstatRetornat($value);
				break;
			case 15:
				$this->setDataRetornat($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CessioPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCessioId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setActiu($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setSiteId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setUsuariId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNom($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDni($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setRepresentant($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setMotiu($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCondicions($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setMaterialNoInventariat($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setDataCessio($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDataRetorn($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setEstat($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setRetornat($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setEstatRetornat($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setDataRetornat($arr[$keys[15]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CessioPeer::DATABASE_NAME);

		if ($this->isColumnModified(CessioPeer::CESSIO_ID)) $criteria->add(CessioPeer::CESSIO_ID, $this->cessio_id);
		if ($this->isColumnModified(CessioPeer::ACTIU)) $criteria->add(CessioPeer::ACTIU, $this->actiu);
		if ($this->isColumnModified(CessioPeer::SITE_ID)) $criteria->add(CessioPeer::SITE_ID, $this->site_id);
		if ($this->isColumnModified(CessioPeer::USUARI_ID)) $criteria->add(CessioPeer::USUARI_ID, $this->usuari_id);
		if ($this->isColumnModified(CessioPeer::NOM)) $criteria->add(CessioPeer::NOM, $this->nom);
		if ($this->isColumnModified(CessioPeer::DNI)) $criteria->add(CessioPeer::DNI, $this->dni);
		if ($this->isColumnModified(CessioPeer::REPRESENTANT)) $criteria->add(CessioPeer::REPRESENTANT, $this->representant);
		if ($this->isColumnModified(CessioPeer::MOTIU)) $criteria->add(CessioPeer::MOTIU, $this->motiu);
		if ($this->isColumnModified(CessioPeer::CONDICIONS)) $criteria->add(CessioPeer::CONDICIONS, $this->condicions);
		if ($this->isColumnModified(CessioPeer::MATERIAL_NO_INVENTARIAT)) $criteria->add(CessioPeer::MATERIAL_NO_INVENTARIAT, $this->material_no_inventariat);
		if ($this->isColumnModified(CessioPeer::DATA_CESSIO)) $criteria->add(CessioPeer::DATA_CESSIO, $this->data_cessio);
		if ($this->isColumnModified(CessioPeer::DATA_RETORN)) $criteria->add(CessioPeer::DATA_RETORN, $this->data_retorn);
		if ($this->isColumnModified(CessioPeer::ESTAT)) $criteria->add(CessioPeer::ESTAT, $this->estat);
		if ($this->isColumnModified(CessioPeer::RETORNAT)) $criteria->add(CessioPeer::RETORNAT, $this->retornat);
		if ($this->isColumnModified(CessioPeer::ESTAT_RETORNAT)) $criteria->add(CessioPeer::ESTAT_RETORNAT, $this->estat_retornat);
		if ($this->isColumnModified(CessioPeer::DATA_RETORNAT)) $criteria->add(CessioPeer::DATA_RETORNAT, $this->data_retornat);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CessioPeer::DATABASE_NAME);

		$criteria->add(CessioPeer::CESSIO_ID, $this->cessio_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getCessioId();
	}

	/**
	 * Generic method to set the primary key (cessio_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCessioId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Cessio (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setActiu($this->actiu);

		$copyObj->setSiteId($this->site_id);

		$copyObj->setUsuariId($this->usuari_id);

		$copyObj->setNom($this->nom);

		$copyObj->setDni($this->dni);

		$copyObj->setRepresentant($this->representant);

		$copyObj->setMotiu($this->motiu);

		$copyObj->setCondicions($this->condicions);

		$copyObj->setMaterialNoInventariat($this->material_no_inventariat);

		$copyObj->setDataCessio($this->data_cessio);

		$copyObj->setDataRetorn($this->data_retorn);

		$copyObj->setEstat($this->estat);

		$copyObj->setRetornat($this->retornat);

		$copyObj->setEstatRetornat($this->estat_retornat);

		$copyObj->setDataRetornat($this->data_retornat);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCessiomaterials() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCessiomaterial($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setCessioId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Cessio Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CessioPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CessioPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Usuaris object.
	 *
	 * @param      Usuaris $v
	 * @return     Cessio The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsuaris(Usuaris $v = null)
	{
		if ($v === null) {
			$this->setUsuariId(NULL);
		} else {
			$this->setUsuariId($v->getUsuariid());
		}

		$this->aUsuaris = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Usuaris object, it will not be re-added.
		if ($v !== null) {
			$v->addCessio($this);
		}

		return $this;
	}


	/**
	 * Get the associated Usuaris object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Usuaris The associated Usuaris object.
	 * @throws     PropelException
	 */
	public function getUsuaris(PropelPDO $con = null)
	{
		if ($this->aUsuaris === null && ($this->usuari_id !== null)) {
			$this->aUsuaris = UsuarisPeer::retrieveByPk($this->usuari_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUsuaris->addCessios($this);
			 */
		}
		return $this->aUsuaris;
	}

	/**
	 * Clears out the collCessiomaterials collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCessiomaterials()
	 */
	public function clearCessiomaterials()
	{
		$this->collCessiomaterials = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCessiomaterials collection (array).
	 *
	 * By default this just sets the collCessiomaterials collection to an empty array (like clearcollCessiomaterials());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCessiomaterials()
	{
		$this->collCessiomaterials = array();
	}

	/**
	 * Gets an array of Cessiomaterial objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Cessio has previously been saved, it will retrieve
	 * related Cessiomaterials from storage. If this Cessio is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Cessiomaterial[]
	 * @throws     PropelException
	 */
	public function getCessiomaterials($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CessioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCessiomaterials === null) {
			if ($this->isNew()) {
			   $this->collCessiomaterials = array();
			} else {

				$criteria->add(CessiomaterialPeer::CESSIO_ID, $this->cessio_id);

				CessiomaterialPeer::addSelectColumns($criteria);
				$this->collCessiomaterials = CessiomaterialPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CessiomaterialPeer::CESSIO_ID, $this->cessio_id);

				CessiomaterialPeer::addSelectColumns($criteria);
				if (!isset($this->lastCessiomaterialCriteria) || !$this->lastCessiomaterialCriteria->equals($criteria)) {
					$this->collCessiomaterials = CessiomaterialPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCessiomaterialCriteria = $criteria;
		return $this->collCessiomaterials;
	}

	/**
	 * Returns the number of related Cessiomaterial objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Cessiomaterial objects.
	 * @throws     PropelException
	 */
	public function countCessiomaterials(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CessioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCessiomaterials === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CessiomaterialPeer::CESSIO_ID, $this->cessio_id);

				$count = CessiomaterialPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CessiomaterialPeer::CESSIO_ID, $this->cessio_id);

				if (!isset($this->lastCessiomaterialCriteria) || !$this->lastCessiomaterialCriteria->equals($criteria)) {
					$count = CessiomaterialPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCessiomaterials);
				}
			} else {
				$count = count($this->collCessiomaterials);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Cessiomaterial object to this object
	 * through the Cessiomaterial foreign key attribute.
	 *
	 * @param      Cessiomaterial $l Cessiomaterial
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCessiomaterial(Cessiomaterial $l)
	{
		if ($this->collCessiomaterials === null) {
			$this->initCessiomaterials();
		}
		if (!in_array($l, $this->collCessiomaterials, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCessiomaterials, $l);
			$l->setCessio($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Cessio is new, it will return
	 * an empty collection; or if this Cessio has previously
	 * been saved, it will retrieve related Cessiomaterials from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Cessio.
	 */
	public function getCessiomaterialsJoinMaterial($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CessioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCessiomaterials === null) {
			if ($this->isNew()) {
				$this->collCessiomaterials = array();
			} else {

				$criteria->add(CessiomaterialPeer::CESSIO_ID, $this->cessio_id);

				$this->collCessiomaterials = CessiomaterialPeer::doSelectJoinMaterial($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CessiomaterialPeer::CESSIO_ID, $this->cessio_id);

			if (!isset($this->lastCessiomaterialCriteria) || !$this->lastCessiomaterialCriteria->equals($criteria)) {
				$this->collCessiomaterials = CessiomaterialPeer::doSelectJoinMaterial($criteria, $con, $join_behavior);
			}
		}
		$this->lastCessiomaterialCriteria = $criteria;

		return $this->collCessiomaterials;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCessiomaterials) {
				foreach ((array) $this->collCessiomaterials as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCessiomaterials = null;
			$this->aUsuaris = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseCessio:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseCessio::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseCessio
