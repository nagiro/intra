<?php

/**
 * Base class that represents a row from the 'usuaris' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 09/05/11 11:03:14
 *
 * @package    lib.model.om
 */
abstract class BaseUsuaris extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UsuarisPeer
	 */
	protected static $peer;

	/**
	 * The value for the usuariid field.
	 * @var        int
	 */
	protected $usuariid;

	/**
	 * The value for the nivells_idnivells field.
	 * @var        int
	 */
	protected $nivells_idnivells;

	/**
	 * The value for the dni field.
	 * @var        string
	 */
	protected $dni;

	/**
	 * The value for the passwd field.
	 * @var        string
	 */
	protected $passwd;

	/**
	 * The value for the nom field.
	 * @var        string
	 */
	protected $nom;

	/**
	 * The value for the cog1 field.
	 * @var        string
	 */
	protected $cog1;

	/**
	 * The value for the cog2 field.
	 * @var        string
	 */
	protected $cog2;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the adreca field.
	 * @var        string
	 */
	protected $adreca;

	/**
	 * The value for the codipostal field.
	 * @var        int
	 */
	protected $codipostal;

	/**
	 * The value for the poblacio field.
	 * @var        int
	 */
	protected $poblacio;

	/**
	 * The value for the poblaciotext field.
	 * @var        string
	 */
	protected $poblaciotext;

	/**
	 * The value for the telefon field.
	 * @var        string
	 */
	protected $telefon;

	/**
	 * The value for the mobil field.
	 * @var        string
	 */
	protected $mobil;

	/**
	 * The value for the entitat field.
	 * @var        string
	 */
	protected $entitat;

	/**
	 * The value for the habilitat field.
	 * @var        int
	 */
	protected $habilitat;

	/**
	 * The value for the actualitzacio field.
	 * @var        string
	 */
	protected $actualitzacio;

	/**
	 * The value for the site_id field.
	 * @var        int
	 */
	protected $site_id;

	/**
	 * The value for the actiu field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $actiu;

	/**
	 * The value for the facebook_id field.
	 * @var        string
	 */
	protected $facebook_id;

	/**
	 * @var        Nivells
	 */
	protected $aNivells;

	/**
	 * @var        Poblacions
	 */
	protected $aPoblacions;

	/**
	 * @var        array AppDocumentsPermisos[] Collection to store aggregation of AppDocumentsPermisos objects.
	 */
	protected $collAppDocumentsPermisoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAppDocumentsPermisoss.
	 */
	private $lastAppDocumentsPermisosCriteria = null;

	/**
	 * @var        array AppDocumentsPermisosDir[] Collection to store aggregation of AppDocumentsPermisosDir objects.
	 */
	protected $collAppDocumentsPermisosDirs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAppDocumentsPermisosDirs.
	 */
	private $lastAppDocumentsPermisosDirCriteria = null;

	/**
	 * @var        array Cessio[] Collection to store aggregation of Cessio objects.
	 */
	protected $collCessios;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCessios.
	 */
	private $lastCessioCriteria = null;

	/**
	 * @var        array Factures[] Collection to store aggregation of Factures objects.
	 */
	protected $collFacturess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFacturess.
	 */
	private $lastFacturesCriteria = null;

	/**
	 * @var        array Incidencies[] Collection to store aggregation of Incidencies objects.
	 */
	protected $collIncidenciessRelatedByQuiinforma;

	/**
	 * @var        Criteria The criteria used to select the current contents of collIncidenciessRelatedByQuiinforma.
	 */
	private $lastIncidenciesRelatedByQuiinformaCriteria = null;

	/**
	 * @var        array Incidencies[] Collection to store aggregation of Incidencies objects.
	 */
	protected $collIncidenciessRelatedByQuiresol;

	/**
	 * @var        Criteria The criteria used to select the current contents of collIncidenciessRelatedByQuiresol.
	 */
	private $lastIncidenciesRelatedByQuiresolCriteria = null;

	/**
	 * @var        array Log[] Collection to store aggregation of Log objects.
	 */
	protected $collLogs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLogs.
	 */
	private $lastLogCriteria = null;

	/**
	 * @var        array Matricules[] Collection to store aggregation of Matricules objects.
	 */
	protected $collMatriculess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMatriculess.
	 */
	private $lastMatriculesCriteria = null;

	/**
	 * @var        array Missatges[] Collection to store aggregation of Missatges objects.
	 */
	protected $collMissatgess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMissatgess.
	 */
	private $lastMissatgesCriteria = null;

	/**
	 * @var        array Personal[] Collection to store aggregation of Personal objects.
	 */
	protected $collPersonalsRelatedByIdusuari;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPersonalsRelatedByIdusuari.
	 */
	private $lastPersonalRelatedByIdusuariCriteria = null;

	/**
	 * @var        array Personal[] Collection to store aggregation of Personal objects.
	 */
	protected $collPersonalsRelatedByUsuariupdateid;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPersonalsRelatedByUsuariupdateid.
	 */
	private $lastPersonalRelatedByUsuariupdateidCriteria = null;

	/**
	 * @var        array Reservaespais[] Collection to store aggregation of Reservaespais objects.
	 */
	protected $collReservaespaiss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collReservaespaiss.
	 */
	private $lastReservaespaisCriteria = null;

	/**
	 * @var        array UsuarisApps[] Collection to store aggregation of UsuarisApps objects.
	 */
	protected $collUsuarisAppss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsuarisAppss.
	 */
	private $lastUsuarisAppsCriteria = null;

	/**
	 * @var        array UsuarisMenus[] Collection to store aggregation of UsuarisMenus objects.
	 */
	protected $collUsuarisMenuss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsuarisMenuss.
	 */
	private $lastUsuarisMenusCriteria = null;

	/**
	 * @var        array UsuarisSites[] Collection to store aggregation of UsuarisSites objects.
	 */
	protected $collUsuarisSitess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsuarisSitess.
	 */
	private $lastUsuarisSitesCriteria = null;

	/**
	 * @var        array Usuarisllistes[] Collection to store aggregation of Usuarisllistes objects.
	 */
	protected $collUsuarisllistess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsuarisllistess.
	 */
	private $lastUsuarisllistesCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'UsuarisPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->actiu = 1;
	}

	/**
	 * Initializes internal state of BaseUsuaris object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [usuariid] column value.
	 * 
	 * @return     int
	 */
	public function getUsuariid()
	{
		return $this->usuariid;
	}

	/**
	 * Get the [nivells_idnivells] column value.
	 * 
	 * @return     int
	 */
	public function getNivellsIdnivells()
	{
		return $this->nivells_idnivells;
	}

	/**
	 * Get the [dni] column value.
	 * 
	 * @return     string
	 */
	public function getDni()
	{
		return $this->dni;
	}

	/**
	 * Get the [passwd] column value.
	 * 
	 * @return     string
	 */
	public function getPasswd()
	{
		return $this->passwd;
	}

	/**
	 * Get the [nom] column value.
	 * 
	 * @return     string
	 */
	public function getNom()
	{
		return $this->nom;
	}

	/**
	 * Get the [cog1] column value.
	 * 
	 * @return     string
	 */
	public function getCog1()
	{
		return $this->cog1;
	}

	/**
	 * Get the [cog2] column value.
	 * 
	 * @return     string
	 */
	public function getCog2()
	{
		return $this->cog2;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [adreca] column value.
	 * 
	 * @return     string
	 */
	public function getAdreca()
	{
		return $this->adreca;
	}

	/**
	 * Get the [codipostal] column value.
	 * 
	 * @return     int
	 */
	public function getCodipostal()
	{
		return $this->codipostal;
	}

	/**
	 * Get the [poblacio] column value.
	 * 
	 * @return     int
	 */
	public function getPoblacio()
	{
		return $this->poblacio;
	}

	/**
	 * Get the [poblaciotext] column value.
	 * 
	 * @return     string
	 */
	public function getPoblaciotext()
	{
		return $this->poblaciotext;
	}

	/**
	 * Get the [telefon] column value.
	 * 
	 * @return     string
	 */
	public function getTelefon()
	{
		return $this->telefon;
	}

	/**
	 * Get the [mobil] column value.
	 * 
	 * @return     string
	 */
	public function getMobil()
	{
		return $this->mobil;
	}

	/**
	 * Get the [entitat] column value.
	 * 
	 * @return     string
	 */
	public function getEntitat()
	{
		return $this->entitat;
	}

	/**
	 * Get the [habilitat] column value.
	 * 
	 * @return     int
	 */
	public function getHabilitat()
	{
		return $this->habilitat;
	}

	/**
	 * Get the [optionally formatted] temporal [actualitzacio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getActualitzacio($format = 'Y-m-d')
	{
		if ($this->actualitzacio === null) {
			return null;
		}


		if ($this->actualitzacio === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->actualitzacio);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->actualitzacio, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [site_id] column value.
	 * 
	 * @return     int
	 */
	public function getSiteId()
	{
		return $this->site_id;
	}

	/**
	 * Get the [actiu] column value.
	 * 
	 * @return     int
	 */
	public function getActiu()
	{
		return $this->actiu;
	}

	/**
	 * Get the [facebook_id] column value.
	 * 
	 * @return     string
	 */
	public function getFacebookId()
	{
		return $this->facebook_id;
	}

	/**
	 * Set the value of [usuariid] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setUsuariid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usuariid !== $v) {
			$this->usuariid = $v;
			$this->modifiedColumns[] = UsuarisPeer::USUARIID;
		}

		return $this;
	} // setUsuariid()

	/**
	 * Set the value of [nivells_idnivells] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setNivellsIdnivells($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->nivells_idnivells !== $v) {
			$this->nivells_idnivells = $v;
			$this->modifiedColumns[] = UsuarisPeer::NIVELLS_IDNIVELLS;
		}

		if ($this->aNivells !== null && $this->aNivells->getIdnivells() !== $v) {
			$this->aNivells = null;
		}

		return $this;
	} // setNivellsIdnivells()

	/**
	 * Set the value of [dni] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setDni($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dni !== $v) {
			$this->dni = $v;
			$this->modifiedColumns[] = UsuarisPeer::DNI;
		}

		return $this;
	} // setDni()

	/**
	 * Set the value of [passwd] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setPasswd($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passwd !== $v) {
			$this->passwd = $v;
			$this->modifiedColumns[] = UsuarisPeer::PASSWD;
		}

		return $this;
	} // setPasswd()

	/**
	 * Set the value of [nom] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setNom($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nom !== $v) {
			$this->nom = $v;
			$this->modifiedColumns[] = UsuarisPeer::NOM;
		}

		return $this;
	} // setNom()

	/**
	 * Set the value of [cog1] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setCog1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cog1 !== $v) {
			$this->cog1 = $v;
			$this->modifiedColumns[] = UsuarisPeer::COG1;
		}

		return $this;
	} // setCog1()

	/**
	 * Set the value of [cog2] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setCog2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cog2 !== $v) {
			$this->cog2 = $v;
			$this->modifiedColumns[] = UsuarisPeer::COG2;
		}

		return $this;
	} // setCog2()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = UsuarisPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [adreca] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setAdreca($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->adreca !== $v) {
			$this->adreca = $v;
			$this->modifiedColumns[] = UsuarisPeer::ADRECA;
		}

		return $this;
	} // setAdreca()

	/**
	 * Set the value of [codipostal] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setCodipostal($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->codipostal !== $v) {
			$this->codipostal = $v;
			$this->modifiedColumns[] = UsuarisPeer::CODIPOSTAL;
		}

		return $this;
	} // setCodipostal()

	/**
	 * Set the value of [poblacio] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setPoblacio($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->poblacio !== $v) {
			$this->poblacio = $v;
			$this->modifiedColumns[] = UsuarisPeer::POBLACIO;
		}

		if ($this->aPoblacions !== null && $this->aPoblacions->getIdpoblacio() !== $v) {
			$this->aPoblacions = null;
		}

		return $this;
	} // setPoblacio()

	/**
	 * Set the value of [poblaciotext] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setPoblaciotext($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->poblaciotext !== $v) {
			$this->poblaciotext = $v;
			$this->modifiedColumns[] = UsuarisPeer::POBLACIOTEXT;
		}

		return $this;
	} // setPoblaciotext()

	/**
	 * Set the value of [telefon] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setTelefon($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefon !== $v) {
			$this->telefon = $v;
			$this->modifiedColumns[] = UsuarisPeer::TELEFON;
		}

		return $this;
	} // setTelefon()

	/**
	 * Set the value of [mobil] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setMobil($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobil !== $v) {
			$this->mobil = $v;
			$this->modifiedColumns[] = UsuarisPeer::MOBIL;
		}

		return $this;
	} // setMobil()

	/**
	 * Set the value of [entitat] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setEntitat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->entitat !== $v) {
			$this->entitat = $v;
			$this->modifiedColumns[] = UsuarisPeer::ENTITAT;
		}

		return $this;
	} // setEntitat()

	/**
	 * Set the value of [habilitat] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setHabilitat($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->habilitat !== $v) {
			$this->habilitat = $v;
			$this->modifiedColumns[] = UsuarisPeer::HABILITAT;
		}

		return $this;
	} // setHabilitat()

	/**
	 * Sets the value of [actualitzacio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setActualitzacio($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->actualitzacio !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->actualitzacio !== null && $tmpDt = new DateTime($this->actualitzacio)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->actualitzacio = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = UsuarisPeer::ACTUALITZACIO;
			}
		} // if either are not null

		return $this;
	} // setActualitzacio()

	/**
	 * Set the value of [site_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setSiteId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->site_id !== $v) {
			$this->site_id = $v;
			$this->modifiedColumns[] = UsuarisPeer::SITE_ID;
		}

		return $this;
	} // setSiteId()

	/**
	 * Set the value of [actiu] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setActiu($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->actiu !== $v || $this->isNew()) {
			$this->actiu = $v;
			$this->modifiedColumns[] = UsuarisPeer::ACTIU;
		}

		return $this;
	} // setActiu()

	/**
	 * Set the value of [facebook_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuaris The current object (for fluent API support)
	 */
	public function setFacebookId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->facebook_id !== $v) {
			$this->facebook_id = $v;
			$this->modifiedColumns[] = UsuarisPeer::FACEBOOK_ID;
		}

		return $this;
	} // setFacebookId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->actiu !== 1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->usuariid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->nivells_idnivells = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->dni = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->passwd = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->nom = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->cog1 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->cog2 = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->email = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->adreca = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->codipostal = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->poblacio = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->poblaciotext = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->telefon = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->mobil = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->entitat = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->habilitat = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->actualitzacio = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->site_id = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->actiu = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->facebook_id = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 20; // 20 = UsuarisPeer::NUM_COLUMNS - UsuarisPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Usuaris object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aNivells !== null && $this->nivells_idnivells !== $this->aNivells->getIdnivells()) {
			$this->aNivells = null;
		}
		if ($this->aPoblacions !== null && $this->poblacio !== $this->aPoblacions->getIdpoblacio()) {
			$this->aPoblacions = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsuarisPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UsuarisPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aNivells = null;
			$this->aPoblacions = null;
			$this->collAppDocumentsPermisoss = null;
			$this->lastAppDocumentsPermisosCriteria = null;

			$this->collAppDocumentsPermisosDirs = null;
			$this->lastAppDocumentsPermisosDirCriteria = null;

			$this->collCessios = null;
			$this->lastCessioCriteria = null;

			$this->collFacturess = null;
			$this->lastFacturesCriteria = null;

			$this->collIncidenciessRelatedByQuiinforma = null;
			$this->lastIncidenciesRelatedByQuiinformaCriteria = null;

			$this->collIncidenciessRelatedByQuiresol = null;
			$this->lastIncidenciesRelatedByQuiresolCriteria = null;

			$this->collLogs = null;
			$this->lastLogCriteria = null;

			$this->collMatriculess = null;
			$this->lastMatriculesCriteria = null;

			$this->collMissatgess = null;
			$this->lastMissatgesCriteria = null;

			$this->collPersonalsRelatedByIdusuari = null;
			$this->lastPersonalRelatedByIdusuariCriteria = null;

			$this->collPersonalsRelatedByUsuariupdateid = null;
			$this->lastPersonalRelatedByUsuariupdateidCriteria = null;

			$this->collReservaespaiss = null;
			$this->lastReservaespaisCriteria = null;

			$this->collUsuarisAppss = null;
			$this->lastUsuarisAppsCriteria = null;

			$this->collUsuarisMenuss = null;
			$this->lastUsuarisMenusCriteria = null;

			$this->collUsuarisSitess = null;
			$this->lastUsuarisSitesCriteria = null;

			$this->collUsuarisllistess = null;
			$this->lastUsuarisllistesCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsuarisPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUsuaris:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				UsuarisPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUsuaris:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsuarisPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUsuaris:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUsuaris:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				UsuarisPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aNivells !== null) {
				if ($this->aNivells->isModified() || $this->aNivells->isNew()) {
					$affectedRows += $this->aNivells->save($con);
				}
				$this->setNivells($this->aNivells);
			}

			if ($this->aPoblacions !== null) {
				if ($this->aPoblacions->isModified() || $this->aPoblacions->isNew()) {
					$affectedRows += $this->aPoblacions->save($con);
				}
				$this->setPoblacions($this->aPoblacions);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UsuarisPeer::USUARIID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UsuarisPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setUsuariid($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UsuarisPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collAppDocumentsPermisoss !== null) {
				foreach ($this->collAppDocumentsPermisoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAppDocumentsPermisosDirs !== null) {
				foreach ($this->collAppDocumentsPermisosDirs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCessios !== null) {
				foreach ($this->collCessios as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFacturess !== null) {
				foreach ($this->collFacturess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collIncidenciessRelatedByQuiinforma !== null) {
				foreach ($this->collIncidenciessRelatedByQuiinforma as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collIncidenciessRelatedByQuiresol !== null) {
				foreach ($this->collIncidenciessRelatedByQuiresol as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLogs !== null) {
				foreach ($this->collLogs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMatriculess !== null) {
				foreach ($this->collMatriculess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMissatgess !== null) {
				foreach ($this->collMissatgess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPersonalsRelatedByIdusuari !== null) {
				foreach ($this->collPersonalsRelatedByIdusuari as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPersonalsRelatedByUsuariupdateid !== null) {
				foreach ($this->collPersonalsRelatedByUsuariupdateid as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collReservaespaiss !== null) {
				foreach ($this->collReservaespaiss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUsuarisAppss !== null) {
				foreach ($this->collUsuarisAppss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUsuarisMenuss !== null) {
				foreach ($this->collUsuarisMenuss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUsuarisSitess !== null) {
				foreach ($this->collUsuarisSitess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUsuarisllistess !== null) {
				foreach ($this->collUsuarisllistess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aNivells !== null) {
				if (!$this->aNivells->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aNivells->getValidationFailures());
				}
			}

			if ($this->aPoblacions !== null) {
				if (!$this->aPoblacions->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPoblacions->getValidationFailures());
				}
			}


			if (($retval = UsuarisPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collAppDocumentsPermisoss !== null) {
					foreach ($this->collAppDocumentsPermisoss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAppDocumentsPermisosDirs !== null) {
					foreach ($this->collAppDocumentsPermisosDirs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCessios !== null) {
					foreach ($this->collCessios as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFacturess !== null) {
					foreach ($this->collFacturess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collIncidenciessRelatedByQuiinforma !== null) {
					foreach ($this->collIncidenciessRelatedByQuiinforma as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collIncidenciessRelatedByQuiresol !== null) {
					foreach ($this->collIncidenciessRelatedByQuiresol as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLogs !== null) {
					foreach ($this->collLogs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMatriculess !== null) {
					foreach ($this->collMatriculess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMissatgess !== null) {
					foreach ($this->collMissatgess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPersonalsRelatedByIdusuari !== null) {
					foreach ($this->collPersonalsRelatedByIdusuari as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPersonalsRelatedByUsuariupdateid !== null) {
					foreach ($this->collPersonalsRelatedByUsuariupdateid as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collReservaespaiss !== null) {
					foreach ($this->collReservaespaiss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUsuarisAppss !== null) {
					foreach ($this->collUsuarisAppss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUsuarisMenuss !== null) {
					foreach ($this->collUsuarisMenuss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUsuarisSitess !== null) {
					foreach ($this->collUsuarisSitess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUsuarisllistess !== null) {
					foreach ($this->collUsuarisllistess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsuarisPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getUsuariid();
				break;
			case 1:
				return $this->getNivellsIdnivells();
				break;
			case 2:
				return $this->getDni();
				break;
			case 3:
				return $this->getPasswd();
				break;
			case 4:
				return $this->getNom();
				break;
			case 5:
				return $this->getCog1();
				break;
			case 6:
				return $this->getCog2();
				break;
			case 7:
				return $this->getEmail();
				break;
			case 8:
				return $this->getAdreca();
				break;
			case 9:
				return $this->getCodipostal();
				break;
			case 10:
				return $this->getPoblacio();
				break;
			case 11:
				return $this->getPoblaciotext();
				break;
			case 12:
				return $this->getTelefon();
				break;
			case 13:
				return $this->getMobil();
				break;
			case 14:
				return $this->getEntitat();
				break;
			case 15:
				return $this->getHabilitat();
				break;
			case 16:
				return $this->getActualitzacio();
				break;
			case 17:
				return $this->getSiteId();
				break;
			case 18:
				return $this->getActiu();
				break;
			case 19:
				return $this->getFacebookId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UsuarisPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getUsuariid(),
			$keys[1] => $this->getNivellsIdnivells(),
			$keys[2] => $this->getDni(),
			$keys[3] => $this->getPasswd(),
			$keys[4] => $this->getNom(),
			$keys[5] => $this->getCog1(),
			$keys[6] => $this->getCog2(),
			$keys[7] => $this->getEmail(),
			$keys[8] => $this->getAdreca(),
			$keys[9] => $this->getCodipostal(),
			$keys[10] => $this->getPoblacio(),
			$keys[11] => $this->getPoblaciotext(),
			$keys[12] => $this->getTelefon(),
			$keys[13] => $this->getMobil(),
			$keys[14] => $this->getEntitat(),
			$keys[15] => $this->getHabilitat(),
			$keys[16] => $this->getActualitzacio(),
			$keys[17] => $this->getSiteId(),
			$keys[18] => $this->getActiu(),
			$keys[19] => $this->getFacebookId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsuarisPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setUsuariid($value);
				break;
			case 1:
				$this->setNivellsIdnivells($value);
				break;
			case 2:
				$this->setDni($value);
				break;
			case 3:
				$this->setPasswd($value);
				break;
			case 4:
				$this->setNom($value);
				break;
			case 5:
				$this->setCog1($value);
				break;
			case 6:
				$this->setCog2($value);
				break;
			case 7:
				$this->setEmail($value);
				break;
			case 8:
				$this->setAdreca($value);
				break;
			case 9:
				$this->setCodipostal($value);
				break;
			case 10:
				$this->setPoblacio($value);
				break;
			case 11:
				$this->setPoblaciotext($value);
				break;
			case 12:
				$this->setTelefon($value);
				break;
			case 13:
				$this->setMobil($value);
				break;
			case 14:
				$this->setEntitat($value);
				break;
			case 15:
				$this->setHabilitat($value);
				break;
			case 16:
				$this->setActualitzacio($value);
				break;
			case 17:
				$this->setSiteId($value);
				break;
			case 18:
				$this->setActiu($value);
				break;
			case 19:
				$this->setFacebookId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UsuarisPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setUsuariid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNivellsIdnivells($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setDni($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setPasswd($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNom($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCog1($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCog2($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setEmail($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setAdreca($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCodipostal($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPoblacio($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setPoblaciotext($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setTelefon($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setMobil($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setEntitat($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setHabilitat($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setActualitzacio($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setSiteId($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setActiu($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setFacebookId($arr[$keys[19]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);

		if ($this->isColumnModified(UsuarisPeer::USUARIID)) $criteria->add(UsuarisPeer::USUARIID, $this->usuariid);
		if ($this->isColumnModified(UsuarisPeer::NIVELLS_IDNIVELLS)) $criteria->add(UsuarisPeer::NIVELLS_IDNIVELLS, $this->nivells_idnivells);
		if ($this->isColumnModified(UsuarisPeer::DNI)) $criteria->add(UsuarisPeer::DNI, $this->dni);
		if ($this->isColumnModified(UsuarisPeer::PASSWD)) $criteria->add(UsuarisPeer::PASSWD, $this->passwd);
		if ($this->isColumnModified(UsuarisPeer::NOM)) $criteria->add(UsuarisPeer::NOM, $this->nom);
		if ($this->isColumnModified(UsuarisPeer::COG1)) $criteria->add(UsuarisPeer::COG1, $this->cog1);
		if ($this->isColumnModified(UsuarisPeer::COG2)) $criteria->add(UsuarisPeer::COG2, $this->cog2);
		if ($this->isColumnModified(UsuarisPeer::EMAIL)) $criteria->add(UsuarisPeer::EMAIL, $this->email);
		if ($this->isColumnModified(UsuarisPeer::ADRECA)) $criteria->add(UsuarisPeer::ADRECA, $this->adreca);
		if ($this->isColumnModified(UsuarisPeer::CODIPOSTAL)) $criteria->add(UsuarisPeer::CODIPOSTAL, $this->codipostal);
		if ($this->isColumnModified(UsuarisPeer::POBLACIO)) $criteria->add(UsuarisPeer::POBLACIO, $this->poblacio);
		if ($this->isColumnModified(UsuarisPeer::POBLACIOTEXT)) $criteria->add(UsuarisPeer::POBLACIOTEXT, $this->poblaciotext);
		if ($this->isColumnModified(UsuarisPeer::TELEFON)) $criteria->add(UsuarisPeer::TELEFON, $this->telefon);
		if ($this->isColumnModified(UsuarisPeer::MOBIL)) $criteria->add(UsuarisPeer::MOBIL, $this->mobil);
		if ($this->isColumnModified(UsuarisPeer::ENTITAT)) $criteria->add(UsuarisPeer::ENTITAT, $this->entitat);
		if ($this->isColumnModified(UsuarisPeer::HABILITAT)) $criteria->add(UsuarisPeer::HABILITAT, $this->habilitat);
		if ($this->isColumnModified(UsuarisPeer::ACTUALITZACIO)) $criteria->add(UsuarisPeer::ACTUALITZACIO, $this->actualitzacio);
		if ($this->isColumnModified(UsuarisPeer::SITE_ID)) $criteria->add(UsuarisPeer::SITE_ID, $this->site_id);
		if ($this->isColumnModified(UsuarisPeer::ACTIU)) $criteria->add(UsuarisPeer::ACTIU, $this->actiu);
		if ($this->isColumnModified(UsuarisPeer::FACEBOOK_ID)) $criteria->add(UsuarisPeer::FACEBOOK_ID, $this->facebook_id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);

		$criteria->add(UsuarisPeer::USUARIID, $this->usuariid);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getUsuariid();
	}

	/**
	 * Generic method to set the primary key (usuariid column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setUsuariid($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Usuaris (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setNivellsIdnivells($this->nivells_idnivells);

		$copyObj->setDni($this->dni);

		$copyObj->setPasswd($this->passwd);

		$copyObj->setNom($this->nom);

		$copyObj->setCog1($this->cog1);

		$copyObj->setCog2($this->cog2);

		$copyObj->setEmail($this->email);

		$copyObj->setAdreca($this->adreca);

		$copyObj->setCodipostal($this->codipostal);

		$copyObj->setPoblacio($this->poblacio);

		$copyObj->setPoblaciotext($this->poblaciotext);

		$copyObj->setTelefon($this->telefon);

		$copyObj->setMobil($this->mobil);

		$copyObj->setEntitat($this->entitat);

		$copyObj->setHabilitat($this->habilitat);

		$copyObj->setActualitzacio($this->actualitzacio);

		$copyObj->setSiteId($this->site_id);

		$copyObj->setActiu($this->actiu);

		$copyObj->setFacebookId($this->facebook_id);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getAppDocumentsPermisoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAppDocumentsPermisos($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAppDocumentsPermisosDirs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAppDocumentsPermisosDir($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCessios() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCessio($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFacturess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFactures($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getIncidenciessRelatedByQuiinforma() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addIncidenciesRelatedByQuiinforma($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getIncidenciessRelatedByQuiresol() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addIncidenciesRelatedByQuiresol($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLogs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLog($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMatriculess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMatricules($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMissatgess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMissatges($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPersonalsRelatedByIdusuari() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPersonalRelatedByIdusuari($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPersonalsRelatedByUsuariupdateid() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPersonalRelatedByUsuariupdateid($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getReservaespaiss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addReservaespais($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUsuarisAppss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUsuarisApps($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUsuarisMenuss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUsuarisMenus($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUsuarisSitess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUsuarisSites($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUsuarisllistess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUsuarisllistes($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setUsuariid(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Usuaris Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UsuarisPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UsuarisPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Nivells object.
	 *
	 * @param      Nivells $v
	 * @return     Usuaris The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setNivells(Nivells $v = null)
	{
		if ($v === null) {
			$this->setNivellsIdnivells(NULL);
		} else {
			$this->setNivellsIdnivells($v->getIdnivells());
		}

		$this->aNivells = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Nivells object, it will not be re-added.
		if ($v !== null) {
			$v->addUsuaris($this);
		}

		return $this;
	}


	/**
	 * Get the associated Nivells object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Nivells The associated Nivells object.
	 * @throws     PropelException
	 */
	public function getNivells(PropelPDO $con = null)
	{
		if ($this->aNivells === null && ($this->nivells_idnivells !== null)) {
			$this->aNivells = NivellsPeer::retrieveByPk($this->nivells_idnivells);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aNivells->addUsuariss($this);
			 */
		}
		return $this->aNivells;
	}

	/**
	 * Declares an association between this object and a Poblacions object.
	 *
	 * @param      Poblacions $v
	 * @return     Usuaris The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPoblacions(Poblacions $v = null)
	{
		if ($v === null) {
			$this->setPoblacio(NULL);
		} else {
			$this->setPoblacio($v->getIdpoblacio());
		}

		$this->aPoblacions = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Poblacions object, it will not be re-added.
		if ($v !== null) {
			$v->addUsuaris($this);
		}

		return $this;
	}


	/**
	 * Get the associated Poblacions object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Poblacions The associated Poblacions object.
	 * @throws     PropelException
	 */
	public function getPoblacions(PropelPDO $con = null)
	{
		if ($this->aPoblacions === null && ($this->poblacio !== null)) {
			$this->aPoblacions = PoblacionsPeer::retrieveByPk($this->poblacio);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPoblacions->addUsuariss($this);
			 */
		}
		return $this->aPoblacions;
	}

	/**
	 * Clears out the collAppDocumentsPermisoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAppDocumentsPermisoss()
	 */
	public function clearAppDocumentsPermisoss()
	{
		$this->collAppDocumentsPermisoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAppDocumentsPermisoss collection (array).
	 *
	 * By default this just sets the collAppDocumentsPermisoss collection to an empty array (like clearcollAppDocumentsPermisoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAppDocumentsPermisoss()
	{
		$this->collAppDocumentsPermisoss = array();
	}

	/**
	 * Gets an array of AppDocumentsPermisos objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related AppDocumentsPermisoss from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AppDocumentsPermisos[]
	 * @throws     PropelException
	 */
	public function getAppDocumentsPermisoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAppDocumentsPermisoss === null) {
			if ($this->isNew()) {
			   $this->collAppDocumentsPermisoss = array();
			} else {

				$criteria->add(AppDocumentsPermisosPeer::IDUSUARI, $this->usuariid);

				AppDocumentsPermisosPeer::addSelectColumns($criteria);
				$this->collAppDocumentsPermisoss = AppDocumentsPermisosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AppDocumentsPermisosPeer::IDUSUARI, $this->usuariid);

				AppDocumentsPermisosPeer::addSelectColumns($criteria);
				if (!isset($this->lastAppDocumentsPermisosCriteria) || !$this->lastAppDocumentsPermisosCriteria->equals($criteria)) {
					$this->collAppDocumentsPermisoss = AppDocumentsPermisosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAppDocumentsPermisosCriteria = $criteria;
		return $this->collAppDocumentsPermisoss;
	}

	/**
	 * Returns the number of related AppDocumentsPermisos objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AppDocumentsPermisos objects.
	 * @throws     PropelException
	 */
	public function countAppDocumentsPermisoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAppDocumentsPermisoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AppDocumentsPermisosPeer::IDUSUARI, $this->usuariid);

				$count = AppDocumentsPermisosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AppDocumentsPermisosPeer::IDUSUARI, $this->usuariid);

				if (!isset($this->lastAppDocumentsPermisosCriteria) || !$this->lastAppDocumentsPermisosCriteria->equals($criteria)) {
					$count = AppDocumentsPermisosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAppDocumentsPermisoss);
				}
			} else {
				$count = count($this->collAppDocumentsPermisoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AppDocumentsPermisos object to this object
	 * through the AppDocumentsPermisos foreign key attribute.
	 *
	 * @param      AppDocumentsPermisos $l AppDocumentsPermisos
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAppDocumentsPermisos(AppDocumentsPermisos $l)
	{
		if ($this->collAppDocumentsPermisoss === null) {
			$this->initAppDocumentsPermisoss();
		}
		if (!in_array($l, $this->collAppDocumentsPermisoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAppDocumentsPermisoss, $l);
			$l->setUsuaris($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related AppDocumentsPermisoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getAppDocumentsPermisossJoinAppDocumentsArxius($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAppDocumentsPermisoss === null) {
			if ($this->isNew()) {
				$this->collAppDocumentsPermisoss = array();
			} else {

				$criteria->add(AppDocumentsPermisosPeer::IDUSUARI, $this->usuariid);

				$this->collAppDocumentsPermisoss = AppDocumentsPermisosPeer::doSelectJoinAppDocumentsArxius($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AppDocumentsPermisosPeer::IDUSUARI, $this->usuariid);

			if (!isset($this->lastAppDocumentsPermisosCriteria) || !$this->lastAppDocumentsPermisosCriteria->equals($criteria)) {
				$this->collAppDocumentsPermisoss = AppDocumentsPermisosPeer::doSelectJoinAppDocumentsArxius($criteria, $con, $join_behavior);
			}
		}
		$this->lastAppDocumentsPermisosCriteria = $criteria;

		return $this->collAppDocumentsPermisoss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related AppDocumentsPermisoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getAppDocumentsPermisossJoinNivells($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAppDocumentsPermisoss === null) {
			if ($this->isNew()) {
				$this->collAppDocumentsPermisoss = array();
			} else {

				$criteria->add(AppDocumentsPermisosPeer::IDUSUARI, $this->usuariid);

				$this->collAppDocumentsPermisoss = AppDocumentsPermisosPeer::doSelectJoinNivells($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AppDocumentsPermisosPeer::IDUSUARI, $this->usuariid);

			if (!isset($this->lastAppDocumentsPermisosCriteria) || !$this->lastAppDocumentsPermisosCriteria->equals($criteria)) {
				$this->collAppDocumentsPermisoss = AppDocumentsPermisosPeer::doSelectJoinNivells($criteria, $con, $join_behavior);
			}
		}
		$this->lastAppDocumentsPermisosCriteria = $criteria;

		return $this->collAppDocumentsPermisoss;
	}

	/**
	 * Clears out the collAppDocumentsPermisosDirs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAppDocumentsPermisosDirs()
	 */
	public function clearAppDocumentsPermisosDirs()
	{
		$this->collAppDocumentsPermisosDirs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAppDocumentsPermisosDirs collection (array).
	 *
	 * By default this just sets the collAppDocumentsPermisosDirs collection to an empty array (like clearcollAppDocumentsPermisosDirs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAppDocumentsPermisosDirs()
	{
		$this->collAppDocumentsPermisosDirs = array();
	}

	/**
	 * Gets an array of AppDocumentsPermisosDir objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related AppDocumentsPermisosDirs from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AppDocumentsPermisosDir[]
	 * @throws     PropelException
	 */
	public function getAppDocumentsPermisosDirs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAppDocumentsPermisosDirs === null) {
			if ($this->isNew()) {
			   $this->collAppDocumentsPermisosDirs = array();
			} else {

				$criteria->add(AppDocumentsPermisosDirPeer::IDUSUARI, $this->usuariid);

				AppDocumentsPermisosDirPeer::addSelectColumns($criteria);
				$this->collAppDocumentsPermisosDirs = AppDocumentsPermisosDirPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AppDocumentsPermisosDirPeer::IDUSUARI, $this->usuariid);

				AppDocumentsPermisosDirPeer::addSelectColumns($criteria);
				if (!isset($this->lastAppDocumentsPermisosDirCriteria) || !$this->lastAppDocumentsPermisosDirCriteria->equals($criteria)) {
					$this->collAppDocumentsPermisosDirs = AppDocumentsPermisosDirPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAppDocumentsPermisosDirCriteria = $criteria;
		return $this->collAppDocumentsPermisosDirs;
	}

	/**
	 * Returns the number of related AppDocumentsPermisosDir objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AppDocumentsPermisosDir objects.
	 * @throws     PropelException
	 */
	public function countAppDocumentsPermisosDirs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAppDocumentsPermisosDirs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AppDocumentsPermisosDirPeer::IDUSUARI, $this->usuariid);

				$count = AppDocumentsPermisosDirPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AppDocumentsPermisosDirPeer::IDUSUARI, $this->usuariid);

				if (!isset($this->lastAppDocumentsPermisosDirCriteria) || !$this->lastAppDocumentsPermisosDirCriteria->equals($criteria)) {
					$count = AppDocumentsPermisosDirPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAppDocumentsPermisosDirs);
				}
			} else {
				$count = count($this->collAppDocumentsPermisosDirs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AppDocumentsPermisosDir object to this object
	 * through the AppDocumentsPermisosDir foreign key attribute.
	 *
	 * @param      AppDocumentsPermisosDir $l AppDocumentsPermisosDir
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAppDocumentsPermisosDir(AppDocumentsPermisosDir $l)
	{
		if ($this->collAppDocumentsPermisosDirs === null) {
			$this->initAppDocumentsPermisosDirs();
		}
		if (!in_array($l, $this->collAppDocumentsPermisosDirs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAppDocumentsPermisosDirs, $l);
			$l->setUsuaris($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related AppDocumentsPermisosDirs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getAppDocumentsPermisosDirsJoinAppDocumentsDirectoris($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAppDocumentsPermisosDirs === null) {
			if ($this->isNew()) {
				$this->collAppDocumentsPermisosDirs = array();
			} else {

				$criteria->add(AppDocumentsPermisosDirPeer::IDUSUARI, $this->usuariid);

				$this->collAppDocumentsPermisosDirs = AppDocumentsPermisosDirPeer::doSelectJoinAppDocumentsDirectoris($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AppDocumentsPermisosDirPeer::IDUSUARI, $this->usuariid);

			if (!isset($this->lastAppDocumentsPermisosDirCriteria) || !$this->lastAppDocumentsPermisosDirCriteria->equals($criteria)) {
				$this->collAppDocumentsPermisosDirs = AppDocumentsPermisosDirPeer::doSelectJoinAppDocumentsDirectoris($criteria, $con, $join_behavior);
			}
		}
		$this->lastAppDocumentsPermisosDirCriteria = $criteria;

		return $this->collAppDocumentsPermisosDirs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related AppDocumentsPermisosDirs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getAppDocumentsPermisosDirsJoinNivells($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAppDocumentsPermisosDirs === null) {
			if ($this->isNew()) {
				$this->collAppDocumentsPermisosDirs = array();
			} else {

				$criteria->add(AppDocumentsPermisosDirPeer::IDUSUARI, $this->usuariid);

				$this->collAppDocumentsPermisosDirs = AppDocumentsPermisosDirPeer::doSelectJoinNivells($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AppDocumentsPermisosDirPeer::IDUSUARI, $this->usuariid);

			if (!isset($this->lastAppDocumentsPermisosDirCriteria) || !$this->lastAppDocumentsPermisosDirCriteria->equals($criteria)) {
				$this->collAppDocumentsPermisosDirs = AppDocumentsPermisosDirPeer::doSelectJoinNivells($criteria, $con, $join_behavior);
			}
		}
		$this->lastAppDocumentsPermisosDirCriteria = $criteria;

		return $this->collAppDocumentsPermisosDirs;
	}

	/**
	 * Clears out the collCessios collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCessios()
	 */
	public function clearCessios()
	{
		$this->collCessios = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCessios collection (array).
	 *
	 * By default this just sets the collCessios collection to an empty array (like clearcollCessios());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCessios()
	{
		$this->collCessios = array();
	}

	/**
	 * Gets an array of Cessio objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related Cessios from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Cessio[]
	 * @throws     PropelException
	 */
	public function getCessios($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCessios === null) {
			if ($this->isNew()) {
			   $this->collCessios = array();
			} else {

				$criteria->add(CessioPeer::USUARI_ID, $this->usuariid);

				CessioPeer::addSelectColumns($criteria);
				$this->collCessios = CessioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CessioPeer::USUARI_ID, $this->usuariid);

				CessioPeer::addSelectColumns($criteria);
				if (!isset($this->lastCessioCriteria) || !$this->lastCessioCriteria->equals($criteria)) {
					$this->collCessios = CessioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCessioCriteria = $criteria;
		return $this->collCessios;
	}

	/**
	 * Returns the number of related Cessio objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Cessio objects.
	 * @throws     PropelException
	 */
	public function countCessios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCessios === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CessioPeer::USUARI_ID, $this->usuariid);

				$count = CessioPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CessioPeer::USUARI_ID, $this->usuariid);

				if (!isset($this->lastCessioCriteria) || !$this->lastCessioCriteria->equals($criteria)) {
					$count = CessioPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCessios);
				}
			} else {
				$count = count($this->collCessios);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Cessio object to this object
	 * through the Cessio foreign key attribute.
	 *
	 * @param      Cessio $l Cessio
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCessio(Cessio $l)
	{
		if ($this->collCessios === null) {
			$this->initCessios();
		}
		if (!in_array($l, $this->collCessios, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCessios, $l);
			$l->setUsuaris($this);
		}
	}

	/**
	 * Clears out the collFacturess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFacturess()
	 */
	public function clearFacturess()
	{
		$this->collFacturess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFacturess collection (array).
	 *
	 * By default this just sets the collFacturess collection to an empty array (like clearcollFacturess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFacturess()
	{
		$this->collFacturess = array();
	}

	/**
	 * Gets an array of Factures objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related Facturess from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Factures[]
	 * @throws     PropelException
	 */
	public function getFacturess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFacturess === null) {
			if ($this->isNew()) {
			   $this->collFacturess = array();
			} else {

				$criteria->add(FacturesPeer::VALIDAUSUARI, $this->usuariid);

				FacturesPeer::addSelectColumns($criteria);
				$this->collFacturess = FacturesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FacturesPeer::VALIDAUSUARI, $this->usuariid);

				FacturesPeer::addSelectColumns($criteria);
				if (!isset($this->lastFacturesCriteria) || !$this->lastFacturesCriteria->equals($criteria)) {
					$this->collFacturess = FacturesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFacturesCriteria = $criteria;
		return $this->collFacturess;
	}

	/**
	 * Returns the number of related Factures objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Factures objects.
	 * @throws     PropelException
	 */
	public function countFacturess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFacturess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FacturesPeer::VALIDAUSUARI, $this->usuariid);

				$count = FacturesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FacturesPeer::VALIDAUSUARI, $this->usuariid);

				if (!isset($this->lastFacturesCriteria) || !$this->lastFacturesCriteria->equals($criteria)) {
					$count = FacturesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFacturess);
				}
			} else {
				$count = count($this->collFacturess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Factures object to this object
	 * through the Factures foreign key attribute.
	 *
	 * @param      Factures $l Factures
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFactures(Factures $l)
	{
		if ($this->collFacturess === null) {
			$this->initFacturess();
		}
		if (!in_array($l, $this->collFacturess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFacturess, $l);
			$l->setUsuaris($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related Facturess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getFacturessJoinProveidors($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFacturess === null) {
			if ($this->isNew()) {
				$this->collFacturess = array();
			} else {

				$criteria->add(FacturesPeer::VALIDAUSUARI, $this->usuariid);

				$this->collFacturess = FacturesPeer::doSelectJoinProveidors($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FacturesPeer::VALIDAUSUARI, $this->usuariid);

			if (!isset($this->lastFacturesCriteria) || !$this->lastFacturesCriteria->equals($criteria)) {
				$this->collFacturess = FacturesPeer::doSelectJoinProveidors($criteria, $con, $join_behavior);
			}
		}
		$this->lastFacturesCriteria = $criteria;

		return $this->collFacturess;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related Facturess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getFacturessJoinConceptes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFacturess === null) {
			if ($this->isNew()) {
				$this->collFacturess = array();
			} else {

				$criteria->add(FacturesPeer::VALIDAUSUARI, $this->usuariid);

				$this->collFacturess = FacturesPeer::doSelectJoinConceptes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FacturesPeer::VALIDAUSUARI, $this->usuariid);

			if (!isset($this->lastFacturesCriteria) || !$this->lastFacturesCriteria->equals($criteria)) {
				$this->collFacturess = FacturesPeer::doSelectJoinConceptes($criteria, $con, $join_behavior);
			}
		}
		$this->lastFacturesCriteria = $criteria;

		return $this->collFacturess;
	}

	/**
	 * Clears out the collIncidenciessRelatedByQuiinforma collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addIncidenciessRelatedByQuiinforma()
	 */
	public function clearIncidenciessRelatedByQuiinforma()
	{
		$this->collIncidenciessRelatedByQuiinforma = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collIncidenciessRelatedByQuiinforma collection (array).
	 *
	 * By default this just sets the collIncidenciessRelatedByQuiinforma collection to an empty array (like clearcollIncidenciessRelatedByQuiinforma());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initIncidenciessRelatedByQuiinforma()
	{
		$this->collIncidenciessRelatedByQuiinforma = array();
	}

	/**
	 * Gets an array of Incidencies objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related IncidenciessRelatedByQuiinforma from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Incidencies[]
	 * @throws     PropelException
	 */
	public function getIncidenciessRelatedByQuiinforma($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collIncidenciessRelatedByQuiinforma === null) {
			if ($this->isNew()) {
			   $this->collIncidenciessRelatedByQuiinforma = array();
			} else {

				$criteria->add(IncidenciesPeer::QUIINFORMA, $this->usuariid);

				IncidenciesPeer::addSelectColumns($criteria);
				$this->collIncidenciessRelatedByQuiinforma = IncidenciesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(IncidenciesPeer::QUIINFORMA, $this->usuariid);

				IncidenciesPeer::addSelectColumns($criteria);
				if (!isset($this->lastIncidenciesRelatedByQuiinformaCriteria) || !$this->lastIncidenciesRelatedByQuiinformaCriteria->equals($criteria)) {
					$this->collIncidenciessRelatedByQuiinforma = IncidenciesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastIncidenciesRelatedByQuiinformaCriteria = $criteria;
		return $this->collIncidenciessRelatedByQuiinforma;
	}

	/**
	 * Returns the number of related Incidencies objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Incidencies objects.
	 * @throws     PropelException
	 */
	public function countIncidenciessRelatedByQuiinforma(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collIncidenciessRelatedByQuiinforma === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(IncidenciesPeer::QUIINFORMA, $this->usuariid);

				$count = IncidenciesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(IncidenciesPeer::QUIINFORMA, $this->usuariid);

				if (!isset($this->lastIncidenciesRelatedByQuiinformaCriteria) || !$this->lastIncidenciesRelatedByQuiinformaCriteria->equals($criteria)) {
					$count = IncidenciesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collIncidenciessRelatedByQuiinforma);
				}
			} else {
				$count = count($this->collIncidenciessRelatedByQuiinforma);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Incidencies object to this object
	 * through the Incidencies foreign key attribute.
	 *
	 * @param      Incidencies $l Incidencies
	 * @return     void
	 * @throws     PropelException
	 */
	public function addIncidenciesRelatedByQuiinforma(Incidencies $l)
	{
		if ($this->collIncidenciessRelatedByQuiinforma === null) {
			$this->initIncidenciessRelatedByQuiinforma();
		}
		if (!in_array($l, $this->collIncidenciessRelatedByQuiinforma, true)) { // only add it if the **same** object is not already associated
			array_push($this->collIncidenciessRelatedByQuiinforma, $l);
			$l->setUsuarisRelatedByQuiinforma($this);
		}
	}

	/**
	 * Clears out the collIncidenciessRelatedByQuiresol collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addIncidenciessRelatedByQuiresol()
	 */
	public function clearIncidenciessRelatedByQuiresol()
	{
		$this->collIncidenciessRelatedByQuiresol = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collIncidenciessRelatedByQuiresol collection (array).
	 *
	 * By default this just sets the collIncidenciessRelatedByQuiresol collection to an empty array (like clearcollIncidenciessRelatedByQuiresol());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initIncidenciessRelatedByQuiresol()
	{
		$this->collIncidenciessRelatedByQuiresol = array();
	}

	/**
	 * Gets an array of Incidencies objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related IncidenciessRelatedByQuiresol from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Incidencies[]
	 * @throws     PropelException
	 */
	public function getIncidenciessRelatedByQuiresol($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collIncidenciessRelatedByQuiresol === null) {
			if ($this->isNew()) {
			   $this->collIncidenciessRelatedByQuiresol = array();
			} else {

				$criteria->add(IncidenciesPeer::QUIRESOL, $this->usuariid);

				IncidenciesPeer::addSelectColumns($criteria);
				$this->collIncidenciessRelatedByQuiresol = IncidenciesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(IncidenciesPeer::QUIRESOL, $this->usuariid);

				IncidenciesPeer::addSelectColumns($criteria);
				if (!isset($this->lastIncidenciesRelatedByQuiresolCriteria) || !$this->lastIncidenciesRelatedByQuiresolCriteria->equals($criteria)) {
					$this->collIncidenciessRelatedByQuiresol = IncidenciesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastIncidenciesRelatedByQuiresolCriteria = $criteria;
		return $this->collIncidenciessRelatedByQuiresol;
	}

	/**
	 * Returns the number of related Incidencies objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Incidencies objects.
	 * @throws     PropelException
	 */
	public function countIncidenciessRelatedByQuiresol(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collIncidenciessRelatedByQuiresol === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(IncidenciesPeer::QUIRESOL, $this->usuariid);

				$count = IncidenciesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(IncidenciesPeer::QUIRESOL, $this->usuariid);

				if (!isset($this->lastIncidenciesRelatedByQuiresolCriteria) || !$this->lastIncidenciesRelatedByQuiresolCriteria->equals($criteria)) {
					$count = IncidenciesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collIncidenciessRelatedByQuiresol);
				}
			} else {
				$count = count($this->collIncidenciessRelatedByQuiresol);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Incidencies object to this object
	 * through the Incidencies foreign key attribute.
	 *
	 * @param      Incidencies $l Incidencies
	 * @return     void
	 * @throws     PropelException
	 */
	public function addIncidenciesRelatedByQuiresol(Incidencies $l)
	{
		if ($this->collIncidenciessRelatedByQuiresol === null) {
			$this->initIncidenciessRelatedByQuiresol();
		}
		if (!in_array($l, $this->collIncidenciessRelatedByQuiresol, true)) { // only add it if the **same** object is not already associated
			array_push($this->collIncidenciessRelatedByQuiresol, $l);
			$l->setUsuarisRelatedByQuiresol($this);
		}
	}

	/**
	 * Clears out the collLogs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLogs()
	 */
	public function clearLogs()
	{
		$this->collLogs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLogs collection (array).
	 *
	 * By default this just sets the collLogs collection to an empty array (like clearcollLogs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLogs()
	{
		$this->collLogs = array();
	}

	/**
	 * Gets an array of Log objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related Logs from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Log[]
	 * @throws     PropelException
	 */
	public function getLogs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLogs === null) {
			if ($this->isNew()) {
			   $this->collLogs = array();
			} else {

				$criteria->add(LogPeer::USUARIID, $this->usuariid);

				LogPeer::addSelectColumns($criteria);
				$this->collLogs = LogPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LogPeer::USUARIID, $this->usuariid);

				LogPeer::addSelectColumns($criteria);
				if (!isset($this->lastLogCriteria) || !$this->lastLogCriteria->equals($criteria)) {
					$this->collLogs = LogPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLogCriteria = $criteria;
		return $this->collLogs;
	}

	/**
	 * Returns the number of related Log objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Log objects.
	 * @throws     PropelException
	 */
	public function countLogs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLogs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LogPeer::USUARIID, $this->usuariid);

				$count = LogPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LogPeer::USUARIID, $this->usuariid);

				if (!isset($this->lastLogCriteria) || !$this->lastLogCriteria->equals($criteria)) {
					$count = LogPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collLogs);
				}
			} else {
				$count = count($this->collLogs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Log object to this object
	 * through the Log foreign key attribute.
	 *
	 * @param      Log $l Log
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLog(Log $l)
	{
		if ($this->collLogs === null) {
			$this->initLogs();
		}
		if (!in_array($l, $this->collLogs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLogs, $l);
			$l->setUsuaris($this);
		}
	}

	/**
	 * Clears out the collMatriculess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMatriculess()
	 */
	public function clearMatriculess()
	{
		$this->collMatriculess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMatriculess collection (array).
	 *
	 * By default this just sets the collMatriculess collection to an empty array (like clearcollMatriculess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMatriculess()
	{
		$this->collMatriculess = array();
	}

	/**
	 * Gets an array of Matricules objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related Matriculess from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Matricules[]
	 * @throws     PropelException
	 */
	public function getMatriculess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMatriculess === null) {
			if ($this->isNew()) {
			   $this->collMatriculess = array();
			} else {

				$criteria->add(MatriculesPeer::USUARIS_USUARIID, $this->usuariid);

				MatriculesPeer::addSelectColumns($criteria);
				$this->collMatriculess = MatriculesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MatriculesPeer::USUARIS_USUARIID, $this->usuariid);

				MatriculesPeer::addSelectColumns($criteria);
				if (!isset($this->lastMatriculesCriteria) || !$this->lastMatriculesCriteria->equals($criteria)) {
					$this->collMatriculess = MatriculesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMatriculesCriteria = $criteria;
		return $this->collMatriculess;
	}

	/**
	 * Returns the number of related Matricules objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Matricules objects.
	 * @throws     PropelException
	 */
	public function countMatriculess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMatriculess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MatriculesPeer::USUARIS_USUARIID, $this->usuariid);

				$count = MatriculesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MatriculesPeer::USUARIS_USUARIID, $this->usuariid);

				if (!isset($this->lastMatriculesCriteria) || !$this->lastMatriculesCriteria->equals($criteria)) {
					$count = MatriculesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collMatriculess);
				}
			} else {
				$count = count($this->collMatriculess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Matricules object to this object
	 * through the Matricules foreign key attribute.
	 *
	 * @param      Matricules $l Matricules
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMatricules(Matricules $l)
	{
		if ($this->collMatriculess === null) {
			$this->initMatriculess();
		}
		if (!in_array($l, $this->collMatriculess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMatriculess, $l);
			$l->setUsuaris($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related Matriculess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getMatriculessJoinCursos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMatriculess === null) {
			if ($this->isNew()) {
				$this->collMatriculess = array();
			} else {

				$criteria->add(MatriculesPeer::USUARIS_USUARIID, $this->usuariid);

				$this->collMatriculess = MatriculesPeer::doSelectJoinCursos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MatriculesPeer::USUARIS_USUARIID, $this->usuariid);

			if (!isset($this->lastMatriculesCriteria) || !$this->lastMatriculesCriteria->equals($criteria)) {
				$this->collMatriculess = MatriculesPeer::doSelectJoinCursos($criteria, $con, $join_behavior);
			}
		}
		$this->lastMatriculesCriteria = $criteria;

		return $this->collMatriculess;
	}

	/**
	 * Clears out the collMissatgess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMissatgess()
	 */
	public function clearMissatgess()
	{
		$this->collMissatgess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMissatgess collection (array).
	 *
	 * By default this just sets the collMissatgess collection to an empty array (like clearcollMissatgess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMissatgess()
	{
		$this->collMissatgess = array();
	}

	/**
	 * Gets an array of Missatges objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related Missatgess from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Missatges[]
	 * @throws     PropelException
	 */
	public function getMissatgess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissatgess === null) {
			if ($this->isNew()) {
			   $this->collMissatgess = array();
			} else {

				$criteria->add(MissatgesPeer::USUARIS_USUARIID, $this->usuariid);

				MissatgesPeer::addSelectColumns($criteria);
				$this->collMissatgess = MissatgesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MissatgesPeer::USUARIS_USUARIID, $this->usuariid);

				MissatgesPeer::addSelectColumns($criteria);
				if (!isset($this->lastMissatgesCriteria) || !$this->lastMissatgesCriteria->equals($criteria)) {
					$this->collMissatgess = MissatgesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMissatgesCriteria = $criteria;
		return $this->collMissatgess;
	}

	/**
	 * Returns the number of related Missatges objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Missatges objects.
	 * @throws     PropelException
	 */
	public function countMissatgess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMissatgess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MissatgesPeer::USUARIS_USUARIID, $this->usuariid);

				$count = MissatgesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MissatgesPeer::USUARIS_USUARIID, $this->usuariid);

				if (!isset($this->lastMissatgesCriteria) || !$this->lastMissatgesCriteria->equals($criteria)) {
					$count = MissatgesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collMissatgess);
				}
			} else {
				$count = count($this->collMissatgess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Missatges object to this object
	 * through the Missatges foreign key attribute.
	 *
	 * @param      Missatges $l Missatges
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMissatges(Missatges $l)
	{
		if ($this->collMissatgess === null) {
			$this->initMissatgess();
		}
		if (!in_array($l, $this->collMissatgess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMissatgess, $l);
			$l->setUsuaris($this);
		}
	}

	/**
	 * Clears out the collPersonalsRelatedByIdusuari collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPersonalsRelatedByIdusuari()
	 */
	public function clearPersonalsRelatedByIdusuari()
	{
		$this->collPersonalsRelatedByIdusuari = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPersonalsRelatedByIdusuari collection (array).
	 *
	 * By default this just sets the collPersonalsRelatedByIdusuari collection to an empty array (like clearcollPersonalsRelatedByIdusuari());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPersonalsRelatedByIdusuari()
	{
		$this->collPersonalsRelatedByIdusuari = array();
	}

	/**
	 * Gets an array of Personal objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related PersonalsRelatedByIdusuari from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Personal[]
	 * @throws     PropelException
	 */
	public function getPersonalsRelatedByIdusuari($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonalsRelatedByIdusuari === null) {
			if ($this->isNew()) {
			   $this->collPersonalsRelatedByIdusuari = array();
			} else {

				$criteria->add(PersonalPeer::IDUSUARI, $this->usuariid);

				PersonalPeer::addSelectColumns($criteria);
				$this->collPersonalsRelatedByIdusuari = PersonalPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PersonalPeer::IDUSUARI, $this->usuariid);

				PersonalPeer::addSelectColumns($criteria);
				if (!isset($this->lastPersonalRelatedByIdusuariCriteria) || !$this->lastPersonalRelatedByIdusuariCriteria->equals($criteria)) {
					$this->collPersonalsRelatedByIdusuari = PersonalPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPersonalRelatedByIdusuariCriteria = $criteria;
		return $this->collPersonalsRelatedByIdusuari;
	}

	/**
	 * Returns the number of related Personal objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Personal objects.
	 * @throws     PropelException
	 */
	public function countPersonalsRelatedByIdusuari(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPersonalsRelatedByIdusuari === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PersonalPeer::IDUSUARI, $this->usuariid);

				$count = PersonalPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PersonalPeer::IDUSUARI, $this->usuariid);

				if (!isset($this->lastPersonalRelatedByIdusuariCriteria) || !$this->lastPersonalRelatedByIdusuariCriteria->equals($criteria)) {
					$count = PersonalPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPersonalsRelatedByIdusuari);
				}
			} else {
				$count = count($this->collPersonalsRelatedByIdusuari);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Personal object to this object
	 * through the Personal foreign key attribute.
	 *
	 * @param      Personal $l Personal
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPersonalRelatedByIdusuari(Personal $l)
	{
		if ($this->collPersonalsRelatedByIdusuari === null) {
			$this->initPersonalsRelatedByIdusuari();
		}
		if (!in_array($l, $this->collPersonalsRelatedByIdusuari, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPersonalsRelatedByIdusuari, $l);
			$l->setUsuarisRelatedByIdusuari($this);
		}
	}

	/**
	 * Clears out the collPersonalsRelatedByUsuariupdateid collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPersonalsRelatedByUsuariupdateid()
	 */
	public function clearPersonalsRelatedByUsuariupdateid()
	{
		$this->collPersonalsRelatedByUsuariupdateid = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPersonalsRelatedByUsuariupdateid collection (array).
	 *
	 * By default this just sets the collPersonalsRelatedByUsuariupdateid collection to an empty array (like clearcollPersonalsRelatedByUsuariupdateid());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPersonalsRelatedByUsuariupdateid()
	{
		$this->collPersonalsRelatedByUsuariupdateid = array();
	}

	/**
	 * Gets an array of Personal objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related PersonalsRelatedByUsuariupdateid from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Personal[]
	 * @throws     PropelException
	 */
	public function getPersonalsRelatedByUsuariupdateid($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonalsRelatedByUsuariupdateid === null) {
			if ($this->isNew()) {
			   $this->collPersonalsRelatedByUsuariupdateid = array();
			} else {

				$criteria->add(PersonalPeer::USUARIUPDATEID, $this->usuariid);

				PersonalPeer::addSelectColumns($criteria);
				$this->collPersonalsRelatedByUsuariupdateid = PersonalPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PersonalPeer::USUARIUPDATEID, $this->usuariid);

				PersonalPeer::addSelectColumns($criteria);
				if (!isset($this->lastPersonalRelatedByUsuariupdateidCriteria) || !$this->lastPersonalRelatedByUsuariupdateidCriteria->equals($criteria)) {
					$this->collPersonalsRelatedByUsuariupdateid = PersonalPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPersonalRelatedByUsuariupdateidCriteria = $criteria;
		return $this->collPersonalsRelatedByUsuariupdateid;
	}

	/**
	 * Returns the number of related Personal objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Personal objects.
	 * @throws     PropelException
	 */
	public function countPersonalsRelatedByUsuariupdateid(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPersonalsRelatedByUsuariupdateid === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PersonalPeer::USUARIUPDATEID, $this->usuariid);

				$count = PersonalPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PersonalPeer::USUARIUPDATEID, $this->usuariid);

				if (!isset($this->lastPersonalRelatedByUsuariupdateidCriteria) || !$this->lastPersonalRelatedByUsuariupdateidCriteria->equals($criteria)) {
					$count = PersonalPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPersonalsRelatedByUsuariupdateid);
				}
			} else {
				$count = count($this->collPersonalsRelatedByUsuariupdateid);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Personal object to this object
	 * through the Personal foreign key attribute.
	 *
	 * @param      Personal $l Personal
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPersonalRelatedByUsuariupdateid(Personal $l)
	{
		if ($this->collPersonalsRelatedByUsuariupdateid === null) {
			$this->initPersonalsRelatedByUsuariupdateid();
		}
		if (!in_array($l, $this->collPersonalsRelatedByUsuariupdateid, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPersonalsRelatedByUsuariupdateid, $l);
			$l->setUsuarisRelatedByUsuariupdateid($this);
		}
	}

	/**
	 * Clears out the collReservaespaiss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addReservaespaiss()
	 */
	public function clearReservaespaiss()
	{
		$this->collReservaespaiss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collReservaespaiss collection (array).
	 *
	 * By default this just sets the collReservaespaiss collection to an empty array (like clearcollReservaespaiss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initReservaespaiss()
	{
		$this->collReservaespaiss = array();
	}

	/**
	 * Gets an array of Reservaespais objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related Reservaespaiss from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Reservaespais[]
	 * @throws     PropelException
	 */
	public function getReservaespaiss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collReservaespaiss === null) {
			if ($this->isNew()) {
			   $this->collReservaespaiss = array();
			} else {

				$criteria->add(ReservaespaisPeer::USUARIS_USUARIID, $this->usuariid);

				ReservaespaisPeer::addSelectColumns($criteria);
				$this->collReservaespaiss = ReservaespaisPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ReservaespaisPeer::USUARIS_USUARIID, $this->usuariid);

				ReservaespaisPeer::addSelectColumns($criteria);
				if (!isset($this->lastReservaespaisCriteria) || !$this->lastReservaespaisCriteria->equals($criteria)) {
					$this->collReservaespaiss = ReservaespaisPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastReservaespaisCriteria = $criteria;
		return $this->collReservaespaiss;
	}

	/**
	 * Returns the number of related Reservaespais objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Reservaespais objects.
	 * @throws     PropelException
	 */
	public function countReservaespaiss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collReservaespaiss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ReservaespaisPeer::USUARIS_USUARIID, $this->usuariid);

				$count = ReservaespaisPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ReservaespaisPeer::USUARIS_USUARIID, $this->usuariid);

				if (!isset($this->lastReservaespaisCriteria) || !$this->lastReservaespaisCriteria->equals($criteria)) {
					$count = ReservaespaisPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collReservaespaiss);
				}
			} else {
				$count = count($this->collReservaespaiss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Reservaespais object to this object
	 * through the Reservaespais foreign key attribute.
	 *
	 * @param      Reservaespais $l Reservaespais
	 * @return     void
	 * @throws     PropelException
	 */
	public function addReservaespais(Reservaespais $l)
	{
		if ($this->collReservaespaiss === null) {
			$this->initReservaespaiss();
		}
		if (!in_array($l, $this->collReservaespaiss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collReservaespaiss, $l);
			$l->setUsuaris($this);
		}
	}

	/**
	 * Clears out the collUsuarisAppss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsuarisAppss()
	 */
	public function clearUsuarisAppss()
	{
		$this->collUsuarisAppss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsuarisAppss collection (array).
	 *
	 * By default this just sets the collUsuarisAppss collection to an empty array (like clearcollUsuarisAppss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsuarisAppss()
	{
		$this->collUsuarisAppss = array();
	}

	/**
	 * Gets an array of UsuarisApps objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related UsuarisAppss from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UsuarisApps[]
	 * @throws     PropelException
	 */
	public function getUsuarisAppss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarisAppss === null) {
			if ($this->isNew()) {
			   $this->collUsuarisAppss = array();
			} else {

				$criteria->add(UsuarisAppsPeer::USUARI_ID, $this->usuariid);

				UsuarisAppsPeer::addSelectColumns($criteria);
				$this->collUsuarisAppss = UsuarisAppsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UsuarisAppsPeer::USUARI_ID, $this->usuariid);

				UsuarisAppsPeer::addSelectColumns($criteria);
				if (!isset($this->lastUsuarisAppsCriteria) || !$this->lastUsuarisAppsCriteria->equals($criteria)) {
					$this->collUsuarisAppss = UsuarisAppsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUsuarisAppsCriteria = $criteria;
		return $this->collUsuarisAppss;
	}

	/**
	 * Returns the number of related UsuarisApps objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UsuarisApps objects.
	 * @throws     PropelException
	 */
	public function countUsuarisAppss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsuarisAppss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UsuarisAppsPeer::USUARI_ID, $this->usuariid);

				$count = UsuarisAppsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UsuarisAppsPeer::USUARI_ID, $this->usuariid);

				if (!isset($this->lastUsuarisAppsCriteria) || !$this->lastUsuarisAppsCriteria->equals($criteria)) {
					$count = UsuarisAppsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUsuarisAppss);
				}
			} else {
				$count = count($this->collUsuarisAppss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UsuarisApps object to this object
	 * through the UsuarisApps foreign key attribute.
	 *
	 * @param      UsuarisApps $l UsuarisApps
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUsuarisApps(UsuarisApps $l)
	{
		if ($this->collUsuarisAppss === null) {
			$this->initUsuarisAppss();
		}
		if (!in_array($l, $this->collUsuarisAppss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsuarisAppss, $l);
			$l->setUsuaris($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related UsuarisAppss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getUsuarisAppssJoinApps($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarisAppss === null) {
			if ($this->isNew()) {
				$this->collUsuarisAppss = array();
			} else {

				$criteria->add(UsuarisAppsPeer::USUARI_ID, $this->usuariid);

				$this->collUsuarisAppss = UsuarisAppsPeer::doSelectJoinApps($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UsuarisAppsPeer::USUARI_ID, $this->usuariid);

			if (!isset($this->lastUsuarisAppsCriteria) || !$this->lastUsuarisAppsCriteria->equals($criteria)) {
				$this->collUsuarisAppss = UsuarisAppsPeer::doSelectJoinApps($criteria, $con, $join_behavior);
			}
		}
		$this->lastUsuarisAppsCriteria = $criteria;

		return $this->collUsuarisAppss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related UsuarisAppss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getUsuarisAppssJoinNivells($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarisAppss === null) {
			if ($this->isNew()) {
				$this->collUsuarisAppss = array();
			} else {

				$criteria->add(UsuarisAppsPeer::USUARI_ID, $this->usuariid);

				$this->collUsuarisAppss = UsuarisAppsPeer::doSelectJoinNivells($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UsuarisAppsPeer::USUARI_ID, $this->usuariid);

			if (!isset($this->lastUsuarisAppsCriteria) || !$this->lastUsuarisAppsCriteria->equals($criteria)) {
				$this->collUsuarisAppss = UsuarisAppsPeer::doSelectJoinNivells($criteria, $con, $join_behavior);
			}
		}
		$this->lastUsuarisAppsCriteria = $criteria;

		return $this->collUsuarisAppss;
	}

	/**
	 * Clears out the collUsuarisMenuss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsuarisMenuss()
	 */
	public function clearUsuarisMenuss()
	{
		$this->collUsuarisMenuss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsuarisMenuss collection (array).
	 *
	 * By default this just sets the collUsuarisMenuss collection to an empty array (like clearcollUsuarisMenuss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsuarisMenuss()
	{
		$this->collUsuarisMenuss = array();
	}

	/**
	 * Gets an array of UsuarisMenus objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related UsuarisMenuss from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UsuarisMenus[]
	 * @throws     PropelException
	 */
	public function getUsuarisMenuss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarisMenuss === null) {
			if ($this->isNew()) {
			   $this->collUsuarisMenuss = array();
			} else {

				$criteria->add(UsuarisMenusPeer::USUARI_ID, $this->usuariid);

				UsuarisMenusPeer::addSelectColumns($criteria);
				$this->collUsuarisMenuss = UsuarisMenusPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UsuarisMenusPeer::USUARI_ID, $this->usuariid);

				UsuarisMenusPeer::addSelectColumns($criteria);
				if (!isset($this->lastUsuarisMenusCriteria) || !$this->lastUsuarisMenusCriteria->equals($criteria)) {
					$this->collUsuarisMenuss = UsuarisMenusPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUsuarisMenusCriteria = $criteria;
		return $this->collUsuarisMenuss;
	}

	/**
	 * Returns the number of related UsuarisMenus objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UsuarisMenus objects.
	 * @throws     PropelException
	 */
	public function countUsuarisMenuss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsuarisMenuss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UsuarisMenusPeer::USUARI_ID, $this->usuariid);

				$count = UsuarisMenusPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UsuarisMenusPeer::USUARI_ID, $this->usuariid);

				if (!isset($this->lastUsuarisMenusCriteria) || !$this->lastUsuarisMenusCriteria->equals($criteria)) {
					$count = UsuarisMenusPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUsuarisMenuss);
				}
			} else {
				$count = count($this->collUsuarisMenuss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UsuarisMenus object to this object
	 * through the UsuarisMenus foreign key attribute.
	 *
	 * @param      UsuarisMenus $l UsuarisMenus
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUsuarisMenus(UsuarisMenus $l)
	{
		if ($this->collUsuarisMenuss === null) {
			$this->initUsuarisMenuss();
		}
		if (!in_array($l, $this->collUsuarisMenuss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsuarisMenuss, $l);
			$l->setUsuaris($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related UsuarisMenuss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getUsuarisMenussJoinGestioMenus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarisMenuss === null) {
			if ($this->isNew()) {
				$this->collUsuarisMenuss = array();
			} else {

				$criteria->add(UsuarisMenusPeer::USUARI_ID, $this->usuariid);

				$this->collUsuarisMenuss = UsuarisMenusPeer::doSelectJoinGestioMenus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UsuarisMenusPeer::USUARI_ID, $this->usuariid);

			if (!isset($this->lastUsuarisMenusCriteria) || !$this->lastUsuarisMenusCriteria->equals($criteria)) {
				$this->collUsuarisMenuss = UsuarisMenusPeer::doSelectJoinGestioMenus($criteria, $con, $join_behavior);
			}
		}
		$this->lastUsuarisMenusCriteria = $criteria;

		return $this->collUsuarisMenuss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related UsuarisMenuss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getUsuarisMenussJoinNivells($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarisMenuss === null) {
			if ($this->isNew()) {
				$this->collUsuarisMenuss = array();
			} else {

				$criteria->add(UsuarisMenusPeer::USUARI_ID, $this->usuariid);

				$this->collUsuarisMenuss = UsuarisMenusPeer::doSelectJoinNivells($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UsuarisMenusPeer::USUARI_ID, $this->usuariid);

			if (!isset($this->lastUsuarisMenusCriteria) || !$this->lastUsuarisMenusCriteria->equals($criteria)) {
				$this->collUsuarisMenuss = UsuarisMenusPeer::doSelectJoinNivells($criteria, $con, $join_behavior);
			}
		}
		$this->lastUsuarisMenusCriteria = $criteria;

		return $this->collUsuarisMenuss;
	}

	/**
	 * Clears out the collUsuarisSitess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsuarisSitess()
	 */
	public function clearUsuarisSitess()
	{
		$this->collUsuarisSitess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsuarisSitess collection (array).
	 *
	 * By default this just sets the collUsuarisSitess collection to an empty array (like clearcollUsuarisSitess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsuarisSitess()
	{
		$this->collUsuarisSitess = array();
	}

	/**
	 * Gets an array of UsuarisSites objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related UsuarisSitess from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UsuarisSites[]
	 * @throws     PropelException
	 */
	public function getUsuarisSitess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarisSitess === null) {
			if ($this->isNew()) {
			   $this->collUsuarisSitess = array();
			} else {

				$criteria->add(UsuarisSitesPeer::USUARI_ID, $this->usuariid);

				UsuarisSitesPeer::addSelectColumns($criteria);
				$this->collUsuarisSitess = UsuarisSitesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UsuarisSitesPeer::USUARI_ID, $this->usuariid);

				UsuarisSitesPeer::addSelectColumns($criteria);
				if (!isset($this->lastUsuarisSitesCriteria) || !$this->lastUsuarisSitesCriteria->equals($criteria)) {
					$this->collUsuarisSitess = UsuarisSitesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUsuarisSitesCriteria = $criteria;
		return $this->collUsuarisSitess;
	}

	/**
	 * Returns the number of related UsuarisSites objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UsuarisSites objects.
	 * @throws     PropelException
	 */
	public function countUsuarisSitess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsuarisSitess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UsuarisSitesPeer::USUARI_ID, $this->usuariid);

				$count = UsuarisSitesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UsuarisSitesPeer::USUARI_ID, $this->usuariid);

				if (!isset($this->lastUsuarisSitesCriteria) || !$this->lastUsuarisSitesCriteria->equals($criteria)) {
					$count = UsuarisSitesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUsuarisSitess);
				}
			} else {
				$count = count($this->collUsuarisSitess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UsuarisSites object to this object
	 * through the UsuarisSites foreign key attribute.
	 *
	 * @param      UsuarisSites $l UsuarisSites
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUsuarisSites(UsuarisSites $l)
	{
		if ($this->collUsuarisSitess === null) {
			$this->initUsuarisSitess();
		}
		if (!in_array($l, $this->collUsuarisSitess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsuarisSitess, $l);
			$l->setUsuaris($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related UsuarisSitess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getUsuarisSitessJoinSites($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarisSitess === null) {
			if ($this->isNew()) {
				$this->collUsuarisSitess = array();
			} else {

				$criteria->add(UsuarisSitesPeer::USUARI_ID, $this->usuariid);

				$this->collUsuarisSitess = UsuarisSitesPeer::doSelectJoinSites($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UsuarisSitesPeer::USUARI_ID, $this->usuariid);

			if (!isset($this->lastUsuarisSitesCriteria) || !$this->lastUsuarisSitesCriteria->equals($criteria)) {
				$this->collUsuarisSitess = UsuarisSitesPeer::doSelectJoinSites($criteria, $con, $join_behavior);
			}
		}
		$this->lastUsuarisSitesCriteria = $criteria;

		return $this->collUsuarisSitess;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related UsuarisSitess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getUsuarisSitessJoinNivells($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarisSitess === null) {
			if ($this->isNew()) {
				$this->collUsuarisSitess = array();
			} else {

				$criteria->add(UsuarisSitesPeer::USUARI_ID, $this->usuariid);

				$this->collUsuarisSitess = UsuarisSitesPeer::doSelectJoinNivells($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UsuarisSitesPeer::USUARI_ID, $this->usuariid);

			if (!isset($this->lastUsuarisSitesCriteria) || !$this->lastUsuarisSitesCriteria->equals($criteria)) {
				$this->collUsuarisSitess = UsuarisSitesPeer::doSelectJoinNivells($criteria, $con, $join_behavior);
			}
		}
		$this->lastUsuarisSitesCriteria = $criteria;

		return $this->collUsuarisSitess;
	}

	/**
	 * Clears out the collUsuarisllistess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsuarisllistess()
	 */
	public function clearUsuarisllistess()
	{
		$this->collUsuarisllistess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsuarisllistess collection (array).
	 *
	 * By default this just sets the collUsuarisllistess collection to an empty array (like clearcollUsuarisllistess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsuarisllistess()
	{
		$this->collUsuarisllistess = array();
	}

	/**
	 * Gets an array of Usuarisllistes objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuaris has previously been saved, it will retrieve
	 * related Usuarisllistess from storage. If this Usuaris is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Usuarisllistes[]
	 * @throws     PropelException
	 */
	public function getUsuarisllistess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarisllistess === null) {
			if ($this->isNew()) {
			   $this->collUsuarisllistess = array();
			} else {

				$criteria->add(UsuarisllistesPeer::USUARIS_USUARISID, $this->usuariid);

				UsuarisllistesPeer::addSelectColumns($criteria);
				$this->collUsuarisllistess = UsuarisllistesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UsuarisllistesPeer::USUARIS_USUARISID, $this->usuariid);

				UsuarisllistesPeer::addSelectColumns($criteria);
				if (!isset($this->lastUsuarisllistesCriteria) || !$this->lastUsuarisllistesCriteria->equals($criteria)) {
					$this->collUsuarisllistess = UsuarisllistesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUsuarisllistesCriteria = $criteria;
		return $this->collUsuarisllistess;
	}

	/**
	 * Returns the number of related Usuarisllistes objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Usuarisllistes objects.
	 * @throws     PropelException
	 */
	public function countUsuarisllistess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsuarisllistess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UsuarisllistesPeer::USUARIS_USUARISID, $this->usuariid);

				$count = UsuarisllistesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UsuarisllistesPeer::USUARIS_USUARISID, $this->usuariid);

				if (!isset($this->lastUsuarisllistesCriteria) || !$this->lastUsuarisllistesCriteria->equals($criteria)) {
					$count = UsuarisllistesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUsuarisllistess);
				}
			} else {
				$count = count($this->collUsuarisllistess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Usuarisllistes object to this object
	 * through the Usuarisllistes foreign key attribute.
	 *
	 * @param      Usuarisllistes $l Usuarisllistes
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUsuarisllistes(Usuarisllistes $l)
	{
		if ($this->collUsuarisllistess === null) {
			$this->initUsuarisllistess();
		}
		if (!in_array($l, $this->collUsuarisllistess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsuarisllistess, $l);
			$l->setUsuaris($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuaris is new, it will return
	 * an empty collection; or if this Usuaris has previously
	 * been saved, it will retrieve related Usuarisllistess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuaris.
	 */
	public function getUsuarisllistessJoinLlistes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarisPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarisllistess === null) {
			if ($this->isNew()) {
				$this->collUsuarisllistess = array();
			} else {

				$criteria->add(UsuarisllistesPeer::USUARIS_USUARISID, $this->usuariid);

				$this->collUsuarisllistess = UsuarisllistesPeer::doSelectJoinLlistes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UsuarisllistesPeer::USUARIS_USUARISID, $this->usuariid);

			if (!isset($this->lastUsuarisllistesCriteria) || !$this->lastUsuarisllistesCriteria->equals($criteria)) {
				$this->collUsuarisllistess = UsuarisllistesPeer::doSelectJoinLlistes($criteria, $con, $join_behavior);
			}
		}
		$this->lastUsuarisllistesCriteria = $criteria;

		return $this->collUsuarisllistess;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collAppDocumentsPermisoss) {
				foreach ((array) $this->collAppDocumentsPermisoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAppDocumentsPermisosDirs) {
				foreach ((array) $this->collAppDocumentsPermisosDirs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCessios) {
				foreach ((array) $this->collCessios as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFacturess) {
				foreach ((array) $this->collFacturess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collIncidenciessRelatedByQuiinforma) {
				foreach ((array) $this->collIncidenciessRelatedByQuiinforma as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collIncidenciessRelatedByQuiresol) {
				foreach ((array) $this->collIncidenciessRelatedByQuiresol as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLogs) {
				foreach ((array) $this->collLogs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMatriculess) {
				foreach ((array) $this->collMatriculess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMissatgess) {
				foreach ((array) $this->collMissatgess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPersonalsRelatedByIdusuari) {
				foreach ((array) $this->collPersonalsRelatedByIdusuari as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPersonalsRelatedByUsuariupdateid) {
				foreach ((array) $this->collPersonalsRelatedByUsuariupdateid as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collReservaespaiss) {
				foreach ((array) $this->collReservaespaiss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUsuarisAppss) {
				foreach ((array) $this->collUsuarisAppss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUsuarisMenuss) {
				foreach ((array) $this->collUsuarisMenuss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUsuarisSitess) {
				foreach ((array) $this->collUsuarisSitess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUsuarisllistess) {
				foreach ((array) $this->collUsuarisllistess as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collAppDocumentsPermisoss = null;
		$this->collAppDocumentsPermisosDirs = null;
		$this->collCessios = null;
		$this->collFacturess = null;
		$this->collIncidenciessRelatedByQuiinforma = null;
		$this->collIncidenciessRelatedByQuiresol = null;
		$this->collLogs = null;
		$this->collMatriculess = null;
		$this->collMissatgess = null;
		$this->collPersonalsRelatedByIdusuari = null;
		$this->collPersonalsRelatedByUsuariupdateid = null;
		$this->collReservaespaiss = null;
		$this->collUsuarisAppss = null;
		$this->collUsuarisMenuss = null;
		$this->collUsuarisSitess = null;
		$this->collUsuarisllistess = null;
			$this->aNivells = null;
			$this->aPoblacions = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseUsuaris:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseUsuaris::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseUsuaris
